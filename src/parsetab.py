
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSEnonassoc=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNnonassoc<>LESSEQUALGREATEREQUALEQUALNOTEQUALleft+-leftDOTADDDOTSUBleft*/leftDOTMULDOTDIVrightUMINUSADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQUAL EYE FLOAT FOR GREATEREQUAL ID IF INTEGER LESSEQUAL MULASSIGN NOTEQUAL ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROS program : instructions\n                |  instructions : instructions instruction\n                     | instruction  instruction : block\n                    | if\n                    | for\n                    | while\n                    | break \';\'\n                    | continue \';\'\n                    | return \';\'\n                    | print \';\'\n                    | assign \';\'  block : \'{\' instructions \'}\'  if : IF \'(\' condition \')\' instruction %prec IFX\n           | IF \'(\' condition \')\' instruction ELSE instruction  for : FOR ID \'=\' range instruction  range : expression \':\' expression  while : WHILE \'(\' condition \')\' instruction  break : BREAK  continue : CONTINUE  return : RETURN\n               | RETURN expression  print : PRINT expressions  expression : singleton\n                   | vector\n                   | matrix\n                   | variable  expressions : expressions \',\' expression\n                    | expression  singleton : STRING\n                  | INTEGER\n                  | FLOAT   vector : \'[\' expressions \']\'\n                | \'[\' \']\'  vectors : vectors \',\' vector\n                | vector  matrix : \'[\' vectors \']\'  assign : variable \'=\' expression\n               | variable calculation_assign expression  calculation_assign : ADDASSIGN\n                           | SUBASSIGN\n                           | MULASSIGN\n                           | DIVASSIGN  variable : ID\n               | ID \'[\' INTEGER \']\'\n               | ID \'[\' INTEGER \',\' INTEGER \']\'  comparator : \'<\'\n                   | \'>\'\n                   | EQUAL\n                   | NOTEQUAL\n                   | LESSEQUAL\n                   | GREATEREQUAL  condition : expression comparator expression  expression : expression \'+\' expression\n                   | expression \'-\' expression\n                   | expression \'*\' expression\n                   | expression \'/\' expression  expression : expression DOTADD expression\n                   | expression DOTSUB expression\n                   | expression DOTMUL expression\n                   | expression DOTDIV expression  expression : \'-\' expression %prec UMINUS  expression : \'(\' expression \')\'  expression : expression "\'"  expression : matrix_func \'(\' INTEGER \')\'\n                   | matrix_func \'(\' INTEGER \',\' INTEGER \')\'  matrix_func : EYE\n                    | ONES\n                    | ZEROS '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,23,24,25,26,27,28,57,109,111,114,123,],[-2,0,-1,-4,-5,-6,-7,-8,-3,-9,-10,-11,-12,-13,-14,-15,-17,-19,-16,]),'{':([0,2,3,4,5,6,7,13,16,23,24,25,26,27,28,29,35,36,37,38,42,43,44,57,71,72,76,82,90,92,94,95,96,97,98,99,100,101,102,103,105,106,109,111,114,115,119,120,121,123,124,],[13,13,-4,-5,-6,-7,-8,13,-45,-3,-9,-10,-11,-12,-13,13,-25,-26,-27,-28,-32,-31,-33,-14,-65,-63,-35,13,13,-46,13,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-15,-17,-19,-66,13,-18,-47,-16,-67,]),'IF':([0,2,3,4,5,6,7,13,16,23,24,25,26,27,28,29,35,36,37,38,42,43,44,57,71,72,76,82,90,92,94,95,96,97,98,99,100,101,102,103,105,106,109,111,114,115,119,120,121,123,124,],[14,14,-4,-5,-6,-7,-8,14,-45,-3,-9,-10,-11,-12,-13,14,-25,-26,-27,-28,-32,-31,-33,-14,-65,-63,-35,14,14,-46,14,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-15,-17,-19,-66,14,-18,-47,-16,-67,]),'FOR':([0,2,3,4,5,6,7,13,16,23,24,25,26,27,28,29,35,36,37,38,42,43,44,57,71,72,76,82,90,92,94,95,96,97,98,99,100,101,102,103,105,106,109,111,114,115,119,120,121,123,124,],[15,15,-4,-5,-6,-7,-8,15,-45,-3,-9,-10,-11,-12,-13,15,-25,-26,-27,-28,-32,-31,-33,-14,-65,-63,-35,15,15,-46,15,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-15,-17,-19,-66,15,-18,-47,-16,-67,]),'WHILE':([0,2,3,4,5,6,7,13,16,23,24,25,26,27,28,29,35,36,37,38,42,43,44,57,71,72,76,82,90,92,94,95,96,97,98,99,100,101,102,103,105,106,109,111,114,115,119,120,121,123,124,],[17,17,-4,-5,-6,-7,-8,17,-45,-3,-9,-10,-11,-12,-13,17,-25,-26,-27,-28,-32,-31,-33,-14,-65,-63,-35,17,17,-46,17,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-15,-17,-19,-66,17,-18,-47,-16,-67,]),'BREAK':([0,2,3,4,5,6,7,13,16,23,24,25,26,27,28,29,35,36,37,38,42,43,44,57,71,72,76,82,90,92,94,95,96,97,98,99,100,101,102,103,105,106,109,111,114,115,119,120,121,123,124,],[18,18,-4,-5,-6,-7,-8,18,-45,-3,-9,-10,-11,-12,-13,18,-25,-26,-27,-28,-32,-31,-33,-14,-65,-63,-35,18,18,-46,18,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-15,-17,-19,-66,18,-18,-47,-16,-67,]),'CONTINUE':([0,2,3,4,5,6,7,13,16,23,24,25,26,27,28,29,35,36,37,38,42,43,44,57,71,72,76,82,90,92,94,95,96,97,98,99,100,101,102,103,105,106,109,111,114,115,119,120,121,123,124,],[19,19,-4,-5,-6,-7,-8,19,-45,-3,-9,-10,-11,-12,-13,19,-25,-26,-27,-28,-32,-31,-33,-14,-65,-63,-35,19,19,-46,19,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-15,-17,-19,-66,19,-18,-47,-16,-67,]),'RETURN':([0,2,3,4,5,6,7,13,16,23,24,25,26,27,28,29,35,36,37,38,42,43,44,57,71,72,76,82,90,92,94,95,96,97,98,99,100,101,102,103,105,106,109,111,114,115,119,120,121,123,124,],[20,20,-4,-5,-6,-7,-8,20,-45,-3,-9,-10,-11,-12,-13,20,-25,-26,-27,-28,-32,-31,-33,-14,-65,-63,-35,20,20,-46,20,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-15,-17,-19,-66,20,-18,-47,-16,-67,]),'PRINT':([0,2,3,4,5,6,7,13,16,23,24,25,26,27,28,29,35,36,37,38,42,43,44,57,71,72,76,82,90,92,94,95,96,97,98,99,100,101,102,103,105,106,109,111,114,115,119,120,121,123,124,],[21,21,-4,-5,-6,-7,-8,21,-45,-3,-9,-10,-11,-12,-13,21,-25,-26,-27,-28,-32,-31,-33,-14,-65,-63,-35,21,21,-46,21,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-15,-17,-19,-66,21,-18,-47,-16,-67,]),'ID':([0,2,3,4,5,6,7,13,15,16,20,21,23,24,25,26,27,28,29,30,33,35,36,37,38,39,40,42,43,44,45,51,52,53,54,55,56,57,60,63,64,65,66,67,68,69,70,71,72,76,79,82,83,84,85,86,87,88,89,90,92,94,95,96,97,98,99,100,101,102,103,105,106,109,111,112,114,115,118,119,120,121,123,124,],[16,16,-4,-5,-6,-7,-8,16,31,-45,16,16,-3,-9,-10,-11,-12,-13,16,16,16,-25,-26,-27,-28,16,16,-32,-31,-33,16,16,16,-41,-42,-43,-44,-14,16,16,16,16,16,16,16,16,16,-65,-63,-35,16,16,16,-48,-49,-50,-51,-52,-53,16,-46,16,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-15,-17,16,-19,-66,16,16,-18,-47,-16,-67,]),'}':([3,4,5,6,7,23,24,25,26,27,28,29,57,109,111,114,123,],[-4,-5,-6,-7,-8,-3,-9,-10,-11,-12,-13,57,-14,-15,-17,-19,-16,]),'ELSE':([4,5,6,7,24,25,26,27,28,57,109,111,114,123,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,119,-17,-19,-16,]),';':([8,9,10,11,12,16,18,19,20,34,35,36,37,38,42,43,44,49,50,71,72,76,80,81,92,95,96,97,98,99,100,101,102,103,105,106,108,115,121,124,],[24,25,26,27,28,-45,-20,-21,-22,-23,-25,-26,-27,-28,-32,-31,-33,-24,-30,-65,-63,-35,-39,-40,-46,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-29,-66,-47,-67,]),'(':([14,17,20,21,30,33,39,40,41,45,46,47,48,51,52,53,54,55,56,60,63,64,65,66,67,68,69,70,79,83,84,85,86,87,88,89,112,118,],[30,33,40,40,40,40,40,40,74,40,-68,-69,-70,40,40,-41,-42,-43,-44,40,40,40,40,40,40,40,40,40,40,40,-48,-49,-50,-51,-52,-53,40,40,]),'=':([16,22,31,92,121,],[-45,51,60,-46,-47,]),'ADDASSIGN':([16,22,92,121,],[-45,53,-46,-47,]),'SUBASSIGN':([16,22,92,121,],[-45,54,-46,-47,]),'MULASSIGN':([16,22,92,121,],[-45,55,-46,-47,]),'DIVASSIGN':([16,22,92,121,],[-45,56,-46,-47,]),'+':([16,34,35,36,37,38,42,43,44,50,59,71,72,73,76,78,80,81,91,92,95,96,97,98,99,100,101,102,103,105,106,108,110,115,120,121,124,],[-45,63,-25,-26,-27,-28,-32,-31,-33,63,63,-65,-63,63,-35,-26,63,63,63,-46,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,63,63,-66,63,-47,-67,]),'-':([16,20,21,30,33,34,35,36,37,38,39,40,42,43,44,45,50,51,52,53,54,55,56,59,60,63,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,83,84,85,86,87,88,89,91,92,95,96,97,98,99,100,101,102,103,105,106,108,110,112,115,118,120,121,124,],[-45,39,39,39,39,64,-25,-26,-27,-28,39,39,-32,-31,-33,39,64,39,39,-41,-42,-43,-44,64,39,39,39,39,39,39,39,39,39,-65,-63,64,-35,-26,39,64,64,39,-48,-49,-50,-51,-52,-53,64,-46,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,64,64,39,-66,39,64,-47,-67,]),'*':([16,34,35,36,37,38,42,43,44,50,59,71,72,73,76,78,80,81,91,92,95,96,97,98,99,100,101,102,103,105,106,108,110,115,120,121,124,],[-45,65,-25,-26,-27,-28,-32,-31,-33,65,65,-65,-63,65,-35,-26,65,65,65,-46,65,65,-57,-58,65,65,-61,-62,-64,-34,-38,65,65,-66,65,-47,-67,]),'/':([16,34,35,36,37,38,42,43,44,50,59,71,72,73,76,78,80,81,91,92,95,96,97,98,99,100,101,102,103,105,106,108,110,115,120,121,124,],[-45,66,-25,-26,-27,-28,-32,-31,-33,66,66,-65,-63,66,-35,-26,66,66,66,-46,66,66,-57,-58,66,66,-61,-62,-64,-34,-38,66,66,-66,66,-47,-67,]),'DOTADD':([16,34,35,36,37,38,42,43,44,50,59,71,72,73,76,78,80,81,91,92,95,96,97,98,99,100,101,102,103,105,106,108,110,115,120,121,124,],[-45,67,-25,-26,-27,-28,-32,-31,-33,67,67,-65,-63,67,-35,-26,67,67,67,-46,67,67,-57,-58,-59,-60,-61,-62,-64,-34,-38,67,67,-66,67,-47,-67,]),'DOTSUB':([16,34,35,36,37,38,42,43,44,50,59,71,72,73,76,78,80,81,91,92,95,96,97,98,99,100,101,102,103,105,106,108,110,115,120,121,124,],[-45,68,-25,-26,-27,-28,-32,-31,-33,68,68,-65,-63,68,-35,-26,68,68,68,-46,68,68,-57,-58,-59,-60,-61,-62,-64,-34,-38,68,68,-66,68,-47,-67,]),'DOTMUL':([16,34,35,36,37,38,42,43,44,50,59,71,72,73,76,78,80,81,91,92,95,96,97,98,99,100,101,102,103,105,106,108,110,115,120,121,124,],[-45,69,-25,-26,-27,-28,-32,-31,-33,69,69,-65,-63,69,-35,-26,69,69,69,-46,69,69,69,69,69,69,-61,-62,-64,-34,-38,69,69,-66,69,-47,-67,]),'DOTDIV':([16,34,35,36,37,38,42,43,44,50,59,71,72,73,76,78,80,81,91,92,95,96,97,98,99,100,101,102,103,105,106,108,110,115,120,121,124,],[-45,70,-25,-26,-27,-28,-32,-31,-33,70,70,-65,-63,70,-35,-26,70,70,70,-46,70,70,70,70,70,70,-61,-62,-64,-34,-38,70,70,-66,70,-47,-67,]),"'":([16,34,35,36,37,38,42,43,44,50,59,71,72,73,76,78,80,81,91,92,95,96,97,98,99,100,101,102,103,105,106,108,110,115,120,121,124,],[-45,71,-25,-26,-27,-28,-32,-31,-33,71,71,-65,-63,71,-35,-26,71,71,71,-46,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,71,71,-66,71,-47,-67,]),',':([16,35,36,37,38,42,43,44,49,50,61,71,72,75,76,77,78,92,95,96,97,98,99,100,101,102,103,104,105,106,108,115,117,121,124,],[-45,-25,-26,-27,-28,-32,-31,-33,79,-30,93,-65,-63,79,-35,107,-26,-46,-55,-56,-57,-58,-59,-60,-61,-62,-64,116,-34,-38,-29,-66,-36,-47,-67,]),'<':([16,35,36,37,38,42,43,44,59,71,72,76,92,95,96,97,98,99,100,101,102,103,105,106,115,121,124,],[-45,-25,-26,-27,-28,-32,-31,-33,84,-65,-63,-35,-46,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-66,-47,-67,]),'>':([16,35,36,37,38,42,43,44,59,71,72,76,92,95,96,97,98,99,100,101,102,103,105,106,115,121,124,],[-45,-25,-26,-27,-28,-32,-31,-33,85,-65,-63,-35,-46,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-66,-47,-67,]),'EQUAL':([16,35,36,37,38,42,43,44,59,71,72,76,92,95,96,97,98,99,100,101,102,103,105,106,115,121,124,],[-45,-25,-26,-27,-28,-32,-31,-33,86,-65,-63,-35,-46,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-66,-47,-67,]),'NOTEQUAL':([16,35,36,37,38,42,43,44,59,71,72,76,92,95,96,97,98,99,100,101,102,103,105,106,115,121,124,],[-45,-25,-26,-27,-28,-32,-31,-33,87,-65,-63,-35,-46,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-66,-47,-67,]),'LESSEQUAL':([16,35,36,37,38,42,43,44,59,71,72,76,92,95,96,97,98,99,100,101,102,103,105,106,115,121,124,],[-45,-25,-26,-27,-28,-32,-31,-33,88,-65,-63,-35,-46,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-66,-47,-67,]),'GREATEREQUAL':([16,35,36,37,38,42,43,44,59,71,72,76,92,95,96,97,98,99,100,101,102,103,105,106,115,121,124,],[-45,-25,-26,-27,-28,-32,-31,-33,89,-65,-63,-35,-46,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-66,-47,-67,]),')':([16,35,36,37,38,42,43,44,58,62,71,72,73,76,92,95,96,97,98,99,100,101,102,103,104,105,106,110,115,121,122,124,],[-45,-25,-26,-27,-28,-32,-31,-33,82,94,-65,-63,103,-35,-46,-55,-56,-57,-58,-59,-60,-61,-62,-64,115,-34,-38,-54,-66,-47,124,-67,]),']':([16,35,36,37,38,42,43,44,45,50,61,71,72,75,76,77,78,92,95,96,97,98,99,100,101,102,103,105,106,108,113,115,117,118,121,124,],[-45,-25,-26,-27,-28,-32,-31,-33,76,-30,92,-65,-63,105,-35,106,-26,-46,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-29,121,-66,-36,76,-47,-67,]),':':([16,35,36,37,38,42,43,44,71,72,76,91,92,95,96,97,98,99,100,101,102,103,105,106,115,121,124,],[-45,-25,-26,-27,-28,-32,-31,-33,-65,-63,-35,112,-46,-55,-56,-57,-58,-59,-60,-61,-62,-64,-34,-38,-66,-47,-67,]),'[':([16,20,21,30,33,39,40,45,51,52,53,54,55,56,60,63,64,65,66,67,68,69,70,79,83,84,85,86,87,88,89,107,112,118,],[32,45,45,45,45,45,45,45,45,45,-41,-42,-43,-44,45,45,45,45,45,45,45,45,45,45,45,-48,-49,-50,-51,-52,-53,118,45,45,]),'STRING':([20,21,30,33,39,40,45,51,52,53,54,55,56,60,63,64,65,66,67,68,69,70,79,83,84,85,86,87,88,89,112,118,],[43,43,43,43,43,43,43,43,43,-41,-42,-43,-44,43,43,43,43,43,43,43,43,43,43,43,-48,-49,-50,-51,-52,-53,43,43,]),'INTEGER':([20,21,30,32,33,39,40,45,51,52,53,54,55,56,60,63,64,65,66,67,68,69,70,74,79,83,84,85,86,87,88,89,93,112,116,118,],[42,42,42,61,42,42,42,42,42,42,-41,-42,-43,-44,42,42,42,42,42,42,42,42,42,104,42,42,-48,-49,-50,-51,-52,-53,113,42,122,42,]),'FLOAT':([20,21,30,33,39,40,45,51,52,53,54,55,56,60,63,64,65,66,67,68,69,70,79,83,84,85,86,87,88,89,112,118,],[44,44,44,44,44,44,44,44,44,-41,-42,-43,-44,44,44,44,44,44,44,44,44,44,44,44,-48,-49,-50,-51,-52,-53,44,44,]),'EYE':([20,21,30,33,39,40,45,51,52,53,54,55,56,60,63,64,65,66,67,68,69,70,79,83,84,85,86,87,88,89,112,118,],[46,46,46,46,46,46,46,46,46,-41,-42,-43,-44,46,46,46,46,46,46,46,46,46,46,46,-48,-49,-50,-51,-52,-53,46,46,]),'ONES':([20,21,30,33,39,40,45,51,52,53,54,55,56,60,63,64,65,66,67,68,69,70,79,83,84,85,86,87,88,89,112,118,],[47,47,47,47,47,47,47,47,47,-41,-42,-43,-44,47,47,47,47,47,47,47,47,47,47,47,-48,-49,-50,-51,-52,-53,47,47,]),'ZEROS':([20,21,30,33,39,40,45,51,52,53,54,55,56,60,63,64,65,66,67,68,69,70,79,83,84,85,86,87,88,89,112,118,],[48,48,48,48,48,48,48,48,48,-41,-42,-43,-44,48,48,48,48,48,48,48,48,48,48,48,-48,-49,-50,-51,-52,-53,48,48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,13,],[2,29,]),'instruction':([0,2,13,29,82,90,94,119,],[3,23,3,23,109,111,114,123,]),'block':([0,2,13,29,82,90,94,119,],[4,4,4,4,4,4,4,4,]),'if':([0,2,13,29,82,90,94,119,],[5,5,5,5,5,5,5,5,]),'for':([0,2,13,29,82,90,94,119,],[6,6,6,6,6,6,6,6,]),'while':([0,2,13,29,82,90,94,119,],[7,7,7,7,7,7,7,7,]),'break':([0,2,13,29,82,90,94,119,],[8,8,8,8,8,8,8,8,]),'continue':([0,2,13,29,82,90,94,119,],[9,9,9,9,9,9,9,9,]),'return':([0,2,13,29,82,90,94,119,],[10,10,10,10,10,10,10,10,]),'print':([0,2,13,29,82,90,94,119,],[11,11,11,11,11,11,11,11,]),'assign':([0,2,13,29,82,90,94,119,],[12,12,12,12,12,12,12,12,]),'variable':([0,2,13,20,21,29,30,33,39,40,45,51,52,60,63,64,65,66,67,68,69,70,79,82,83,90,94,112,118,119,],[22,22,22,38,38,22,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,22,38,22,22,38,38,22,]),'expression':([20,21,30,33,39,40,45,51,52,60,63,64,65,66,67,68,69,70,79,83,112,118,],[34,50,59,59,72,73,50,80,81,91,95,96,97,98,99,100,101,102,108,110,120,50,]),'singleton':([20,21,30,33,39,40,45,51,52,60,63,64,65,66,67,68,69,70,79,83,112,118,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'vector':([20,21,30,33,39,40,45,51,52,60,63,64,65,66,67,68,69,70,79,83,107,112,118,],[36,36,36,36,36,36,78,36,36,36,36,36,36,36,36,36,36,36,36,36,117,36,36,]),'matrix':([20,21,30,33,39,40,45,51,52,60,63,64,65,66,67,68,69,70,79,83,112,118,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'matrix_func':([20,21,30,33,39,40,45,51,52,60,63,64,65,66,67,68,69,70,79,83,112,118,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'expressions':([21,45,118,],[49,75,75,]),'calculation_assign':([22,],[52,]),'condition':([30,33,],[58,62,]),'vectors':([45,],[77,]),'comparator':([59,],[83,]),'range':([60,],[90,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','Mparser.py',28),
  ('program -> <empty>','program',0,'p_program','Mparser.py',29),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Mparser.py',38),
  ('instructions -> instruction','instructions',1,'p_instructions','Mparser.py',39),
  ('instruction -> block','instruction',1,'p_instruction','Mparser.py',48),
  ('instruction -> if','instruction',1,'p_instruction','Mparser.py',49),
  ('instruction -> for','instruction',1,'p_instruction','Mparser.py',50),
  ('instruction -> while','instruction',1,'p_instruction','Mparser.py',51),
  ('instruction -> break ;','instruction',2,'p_instruction','Mparser.py',52),
  ('instruction -> continue ;','instruction',2,'p_instruction','Mparser.py',53),
  ('instruction -> return ;','instruction',2,'p_instruction','Mparser.py',54),
  ('instruction -> print ;','instruction',2,'p_instruction','Mparser.py',55),
  ('instruction -> assign ;','instruction',2,'p_instruction','Mparser.py',56),
  ('block -> { instructions }','block',3,'p_block','Mparser.py',62),
  ('if -> IF ( condition ) instruction','if',5,'p_if','Mparser.py',68),
  ('if -> IF ( condition ) instruction ELSE instruction','if',7,'p_if','Mparser.py',69),
  ('for -> FOR ID = range instruction','for',5,'p_for','Mparser.py',78),
  ('range -> expression : expression','range',3,'p_range','Mparser.py',84),
  ('while -> WHILE ( condition ) instruction','while',5,'p_while','Mparser.py',90),
  ('break -> BREAK','break',1,'p_break','Mparser.py',96),
  ('continue -> CONTINUE','continue',1,'p_continue','Mparser.py',103),
  ('return -> RETURN','return',1,'p_return','Mparser.py',110),
  ('return -> RETURN expression','return',2,'p_return','Mparser.py',111),
  ('print -> PRINT expressions','print',2,'p_print','Mparser.py',120),
  ('expression -> singleton','expression',1,'p_expression','Mparser.py',126),
  ('expression -> vector','expression',1,'p_expression','Mparser.py',127),
  ('expression -> matrix','expression',1,'p_expression','Mparser.py',128),
  ('expression -> variable','expression',1,'p_expression','Mparser.py',129),
  ('expressions -> expressions , expression','expressions',3,'p_expressions','Mparser.py',135),
  ('expressions -> expression','expressions',1,'p_expressions','Mparser.py',136),
  ('singleton -> STRING','singleton',1,'p_singleton','Mparser.py',145),
  ('singleton -> INTEGER','singleton',1,'p_singleton','Mparser.py',146),
  ('singleton -> FLOAT','singleton',1,'p_singleton','Mparser.py',147),
  ('vector -> [ expressions ]','vector',3,'p_vector','Mparser.py',153),
  ('vector -> [ ]','vector',2,'p_vector','Mparser.py',154),
  ('vectors -> vectors , vector','vectors',3,'p_vectors','Mparser.py',163),
  ('vectors -> vector','vectors',1,'p_vectors','Mparser.py',164),
  ('matrix -> [ vectors ]','matrix',3,'p_matrix','Mparser.py',173),
  ('assign -> variable = expression','assign',3,'p_assign','Mparser.py',179),
  ('assign -> variable calculation_assign expression','assign',3,'p_assign','Mparser.py',180),
  ('calculation_assign -> ADDASSIGN','calculation_assign',1,'p_calculation_assign','Mparser.py',186),
  ('calculation_assign -> SUBASSIGN','calculation_assign',1,'p_calculation_assign','Mparser.py',187),
  ('calculation_assign -> MULASSIGN','calculation_assign',1,'p_calculation_assign','Mparser.py',188),
  ('calculation_assign -> DIVASSIGN','calculation_assign',1,'p_calculation_assign','Mparser.py',189),
  ('variable -> ID','variable',1,'p_variable','Mparser.py',195),
  ('variable -> ID [ INTEGER ]','variable',4,'p_variable','Mparser.py',196),
  ('variable -> ID [ INTEGER , INTEGER ]','variable',6,'p_variable','Mparser.py',197),
  ('comparator -> <','comparator',1,'p_comparator','Mparser.py',208),
  ('comparator -> >','comparator',1,'p_comparator','Mparser.py',209),
  ('comparator -> EQUAL','comparator',1,'p_comparator','Mparser.py',210),
  ('comparator -> NOTEQUAL','comparator',1,'p_comparator','Mparser.py',211),
  ('comparator -> LESSEQUAL','comparator',1,'p_comparator','Mparser.py',212),
  ('comparator -> GREATEREQUAL','comparator',1,'p_comparator','Mparser.py',213),
  ('condition -> expression comparator expression','condition',3,'p_condition','Mparser.py',219),
  ('expression -> expression + expression','expression',3,'p_expression_binop','Mparser.py',225),
  ('expression -> expression - expression','expression',3,'p_expression_binop','Mparser.py',226),
  ('expression -> expression * expression','expression',3,'p_expression_binop','Mparser.py',227),
  ('expression -> expression / expression','expression',3,'p_expression_binop','Mparser.py',228),
  ('expression -> expression DOTADD expression','expression',3,'p_expression_matrixop','Mparser.py',234),
  ('expression -> expression DOTSUB expression','expression',3,'p_expression_matrixop','Mparser.py',235),
  ('expression -> expression DOTMUL expression','expression',3,'p_expression_matrixop','Mparser.py',236),
  ('expression -> expression DOTDIV expression','expression',3,'p_expression_matrixop','Mparser.py',237),
  ('expression -> - expression','expression',2,'p_expression_uminus','Mparser.py',243),
  ('expression -> ( expression )','expression',3,'p_expression_parentheses','Mparser.py',249),
  ("expression -> expression '",'expression',2,'p_expression_transpose','Mparser.py',255),
  ('expression -> matrix_func ( INTEGER )','expression',4,'p_expression_matrix_functions','Mparser.py',261),
  ('expression -> matrix_func ( INTEGER , INTEGER )','expression',6,'p_expression_matrix_functions','Mparser.py',262),
  ('matrix_func -> EYE','matrix_func',1,'p_matrix_function','Mparser.py',271),
  ('matrix_func -> ONES','matrix_func',1,'p_matrix_function','Mparser.py',272),
  ('matrix_func -> ZEROS','matrix_func',1,'p_matrix_function','Mparser.py',273),
]
