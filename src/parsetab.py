
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left+-left*/ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQUAL EYE FLOAT FOR GREATEREQUAL ID IF INTEGER LESSEQUAL MULASSIGN NOTEQUAL ONES PRINT RETURN STRING SUBASSIGN ZEROSprogram : instructions_optinstructions_opt : instructions instructions_opt : instructions : instructions instruction instructions : instruction instruction : ID '=' expression ';'\n                    | assign : expression  : expression '+' expression\n                | expression '-' expression\n                | expression '*' expression\n                | expression '/' expression\n                | '(' expression ')'\n                | INTEGER\n                | FLOAT\n                | ID"
    
_lr_action_items = {'$end':([0,1,2,3,4,6,13,],[-3,0,-1,-2,-5,-4,-6,]),'ID':([0,3,4,6,7,10,13,14,15,16,17,],[5,5,-5,-4,8,8,-6,8,8,8,8,]),'=':([5,],[7,]),'(':([7,10,14,15,16,17,],[10,10,10,10,10,10,]),'INTEGER':([7,10,14,15,16,17,],[11,11,11,11,11,11,]),'FLOAT':([7,10,14,15,16,17,],[12,12,12,12,12,12,]),';':([8,9,11,12,19,20,21,22,23,],[-16,13,-14,-15,-9,-10,-11,-12,-13,]),'+':([8,9,11,12,18,19,20,21,22,23,],[-16,14,-14,-15,14,-9,-10,-11,-12,-13,]),'-':([8,9,11,12,18,19,20,21,22,23,],[-16,15,-14,-15,15,-9,-10,-11,-12,-13,]),'*':([8,9,11,12,18,19,20,21,22,23,],[-16,16,-14,-15,16,16,16,-11,-12,-13,]),'/':([8,9,11,12,18,19,20,21,22,23,],[-16,17,-14,-15,17,17,17,-11,-12,-13,]),')':([8,11,12,18,19,20,21,22,23,],[-16,-14,-15,23,-9,-10,-11,-12,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,],[3,]),'instruction':([0,3,],[4,6,]),'expression':([7,10,14,15,16,17,],[9,18,19,20,21,22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','Mparser.py',23),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt_1','Mparser.py',27),
  ('instructions_opt -> <empty>','instructions_opt',0,'p_instructions_opt_2','Mparser.py',31),
  ('instructions -> instructions instruction','instructions',2,'p_instructions_1','Mparser.py',35),
  ('instructions -> instruction','instructions',1,'p_instructions_2','Mparser.py',39),
  ('instruction -> ID = expression ;','instruction',4,'p_instruction','Mparser.py',43),
  ('instruction -> <empty>','instruction',0,'p_instruction','Mparser.py',44),
  ('assign -> <empty>','assign',0,'p_assign','Mparser.py',48),
  ('expression -> expression + expression','expression',3,'p_expression_binop','Mparser.py',52),
  ('expression -> expression - expression','expression',3,'p_expression_binop','Mparser.py',53),
  ('expression -> expression * expression','expression',3,'p_expression_binop','Mparser.py',54),
  ('expression -> expression / expression','expression',3,'p_expression_binop','Mparser.py',55),
  ('expression -> ( expression )','expression',3,'p_expression_binop','Mparser.py',56),
  ('expression -> INTEGER','expression',1,'p_expression_binop','Mparser.py',57),
  ('expression -> FLOAT','expression',1,'p_expression_binop','Mparser.py',58),
  ('expression -> ID','expression',1,'p_expression_binop','Mparser.py',59),
]
