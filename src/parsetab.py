
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSEnonassoc=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNnonassoc<>LESSEQUALGREATEREQUALEQUALNOTEQUALleft+-leftDOTADDDOTSUBleft*/leftDOTMULDOTDIVrightUMINUSADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQUAL EYE FLOAT FOR GREATEREQUAL ID IF INTEGER LESSEQUAL MULASSIGN NOTEQUAL ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROS program : instructions\n                |  instructions : instructions instruction\n                     | instruction  instruction : block\n                    | if\n                    | for\n                    | while\n                    | break \';\'\n                    | continue \';\'\n                    | return \';\'\n                    | print \';\'\n                    | assign \';\'  block : \'{\' instructions \'}\'  if : IF \'(\' condition \')\' instruction %prec IFX\n           | IF \'(\' condition \')\' instruction ELSE instruction  for : FOR ID \'=\' range instruction  range : expression \':\' expression  while : WHILE \'(\' condition \')\' instruction  break : BREAK  continue : CONTINUE  return : RETURN\n               | RETURN expression  print : PRINT expressions  expression : singleton\n                   | vector\n                   | variable  expressions : expressions \',\' expression\n                    | expression  singleton : STRING\n                  | INTEGER\n                  | FLOAT   vector : \'[\' expressions \']\'\n               | \'[\' \']\'  assign : variable \'=\' expression\n               | variable calculation_assign expression  calculation_assign : ADDASSIGN\n                           | SUBASSIGN\n                           | MULASSIGN\n                           | DIVASSIGN  variable : ID\n               | ID \'[\' INTEGER \']\'\n               | ID \'[\' INTEGER \',\' INTEGER \']\'  comparator : \'<\'\n                   | \'>\'\n                   | EQUAL\n                   | NOTEQUAL\n                   | LESSEQUAL\n                   | GREATEREQUAL  condition : expression comparator expression  expression : expression \'+\' expression\n                   | expression \'-\' expression\n                   | expression \'*\' expression\n                   | expression \'/\' expression  expression : expression DOTADD expression\n                   | expression DOTSUB expression\n                   | expression DOTMUL expression\n                   | expression DOTDIV expression  expression : \'-\' expression %prec UMINUS  expression : \'(\' expression \')\'  expression : expression "\'"  expression : matrix_func \'(\' INTEGER \')\'\n                   | matrix_func \'(\' INTEGER \',\' INTEGER \')\'  matrix_func : EYE\n                    | ONES\n                    | ZEROS '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,23,24,25,26,27,28,56,104,106,109,116,],[-2,0,-1,-4,-5,-6,-7,-8,-3,-9,-10,-11,-12,-13,-14,-15,-17,-19,-16,]),'{':([0,2,3,4,5,6,7,13,16,23,24,25,26,27,28,29,35,36,37,41,42,43,56,70,71,75,79,87,89,91,92,93,94,95,96,97,98,99,100,102,104,106,109,110,112,113,114,116,117,],[13,13,-4,-5,-6,-7,-8,13,-41,-3,-9,-10,-11,-12,-13,13,-25,-26,-27,-31,-30,-32,-14,-61,-59,-34,13,13,-42,13,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-15,-17,-19,-62,13,-18,-43,-16,-63,]),'IF':([0,2,3,4,5,6,7,13,16,23,24,25,26,27,28,29,35,36,37,41,42,43,56,70,71,75,79,87,89,91,92,93,94,95,96,97,98,99,100,102,104,106,109,110,112,113,114,116,117,],[14,14,-4,-5,-6,-7,-8,14,-41,-3,-9,-10,-11,-12,-13,14,-25,-26,-27,-31,-30,-32,-14,-61,-59,-34,14,14,-42,14,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-15,-17,-19,-62,14,-18,-43,-16,-63,]),'FOR':([0,2,3,4,5,6,7,13,16,23,24,25,26,27,28,29,35,36,37,41,42,43,56,70,71,75,79,87,89,91,92,93,94,95,96,97,98,99,100,102,104,106,109,110,112,113,114,116,117,],[15,15,-4,-5,-6,-7,-8,15,-41,-3,-9,-10,-11,-12,-13,15,-25,-26,-27,-31,-30,-32,-14,-61,-59,-34,15,15,-42,15,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-15,-17,-19,-62,15,-18,-43,-16,-63,]),'WHILE':([0,2,3,4,5,6,7,13,16,23,24,25,26,27,28,29,35,36,37,41,42,43,56,70,71,75,79,87,89,91,92,93,94,95,96,97,98,99,100,102,104,106,109,110,112,113,114,116,117,],[17,17,-4,-5,-6,-7,-8,17,-41,-3,-9,-10,-11,-12,-13,17,-25,-26,-27,-31,-30,-32,-14,-61,-59,-34,17,17,-42,17,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-15,-17,-19,-62,17,-18,-43,-16,-63,]),'BREAK':([0,2,3,4,5,6,7,13,16,23,24,25,26,27,28,29,35,36,37,41,42,43,56,70,71,75,79,87,89,91,92,93,94,95,96,97,98,99,100,102,104,106,109,110,112,113,114,116,117,],[18,18,-4,-5,-6,-7,-8,18,-41,-3,-9,-10,-11,-12,-13,18,-25,-26,-27,-31,-30,-32,-14,-61,-59,-34,18,18,-42,18,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-15,-17,-19,-62,18,-18,-43,-16,-63,]),'CONTINUE':([0,2,3,4,5,6,7,13,16,23,24,25,26,27,28,29,35,36,37,41,42,43,56,70,71,75,79,87,89,91,92,93,94,95,96,97,98,99,100,102,104,106,109,110,112,113,114,116,117,],[19,19,-4,-5,-6,-7,-8,19,-41,-3,-9,-10,-11,-12,-13,19,-25,-26,-27,-31,-30,-32,-14,-61,-59,-34,19,19,-42,19,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-15,-17,-19,-62,19,-18,-43,-16,-63,]),'RETURN':([0,2,3,4,5,6,7,13,16,23,24,25,26,27,28,29,35,36,37,41,42,43,56,70,71,75,79,87,89,91,92,93,94,95,96,97,98,99,100,102,104,106,109,110,112,113,114,116,117,],[20,20,-4,-5,-6,-7,-8,20,-41,-3,-9,-10,-11,-12,-13,20,-25,-26,-27,-31,-30,-32,-14,-61,-59,-34,20,20,-42,20,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-15,-17,-19,-62,20,-18,-43,-16,-63,]),'PRINT':([0,2,3,4,5,6,7,13,16,23,24,25,26,27,28,29,35,36,37,41,42,43,56,70,71,75,79,87,89,91,92,93,94,95,96,97,98,99,100,102,104,106,109,110,112,113,114,116,117,],[21,21,-4,-5,-6,-7,-8,21,-41,-3,-9,-10,-11,-12,-13,21,-25,-26,-27,-31,-30,-32,-14,-61,-59,-34,21,21,-42,21,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-15,-17,-19,-62,21,-18,-43,-16,-63,]),'ID':([0,2,3,4,5,6,7,13,15,16,20,21,23,24,25,26,27,28,29,30,33,35,36,37,38,39,41,42,43,44,50,51,52,53,54,55,56,59,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,82,83,84,85,86,87,89,91,92,93,94,95,96,97,98,99,100,102,104,106,107,109,110,112,113,114,116,117,],[16,16,-4,-5,-6,-7,-8,16,31,-41,16,16,-3,-9,-10,-11,-12,-13,16,16,16,-25,-26,-27,16,16,-31,-30,-32,16,16,16,-37,-38,-39,-40,-14,16,16,16,16,16,16,16,16,16,-61,-59,-34,16,16,16,-44,-45,-46,-47,-48,-49,16,-42,16,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-15,-17,16,-19,-62,16,-18,-43,-16,-63,]),'}':([3,4,5,6,7,23,24,25,26,27,28,29,56,104,106,109,116,],[-4,-5,-6,-7,-8,-3,-9,-10,-11,-12,-13,56,-14,-15,-17,-19,-16,]),'ELSE':([4,5,6,7,24,25,26,27,28,56,104,106,109,116,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,112,-17,-19,-16,]),';':([8,9,10,11,12,16,18,19,20,34,35,36,37,41,42,43,48,49,70,71,75,77,78,89,92,93,94,95,96,97,98,99,100,102,103,110,114,117,],[24,25,26,27,28,-41,-20,-21,-22,-23,-25,-26,-27,-31,-30,-32,-24,-29,-61,-59,-34,-35,-36,-42,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-28,-62,-43,-63,]),'(':([14,17,20,21,30,33,38,39,40,44,45,46,47,50,51,52,53,54,55,59,62,63,64,65,66,67,68,69,76,80,81,82,83,84,85,86,107,],[30,33,39,39,39,39,39,39,73,39,-64,-65,-66,39,39,-37,-38,-39,-40,39,39,39,39,39,39,39,39,39,39,39,-44,-45,-46,-47,-48,-49,39,]),'=':([16,22,31,89,114,],[-41,50,59,-42,-43,]),'ADDASSIGN':([16,22,89,114,],[-41,52,-42,-43,]),'SUBASSIGN':([16,22,89,114,],[-41,53,-42,-43,]),'MULASSIGN':([16,22,89,114,],[-41,54,-42,-43,]),'DIVASSIGN':([16,22,89,114,],[-41,55,-42,-43,]),'+':([16,34,35,36,37,41,42,43,49,58,70,71,72,75,77,78,88,89,92,93,94,95,96,97,98,99,100,102,103,105,110,113,114,117,],[-41,62,-25,-26,-27,-31,-30,-32,62,62,-61,-59,62,-34,62,62,62,-42,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,62,62,-62,62,-43,-63,]),'-':([16,20,21,30,33,34,35,36,37,38,39,41,42,43,44,49,50,51,52,53,54,55,58,59,62,63,64,65,66,67,68,69,70,71,72,75,76,77,78,80,81,82,83,84,85,86,88,89,92,93,94,95,96,97,98,99,100,102,103,105,107,110,113,114,117,],[-41,38,38,38,38,63,-25,-26,-27,38,38,-31,-30,-32,38,63,38,38,-37,-38,-39,-40,63,38,38,38,38,38,38,38,38,38,-61,-59,63,-34,38,63,63,38,-44,-45,-46,-47,-48,-49,63,-42,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,63,63,38,-62,63,-43,-63,]),'*':([16,34,35,36,37,41,42,43,49,58,70,71,72,75,77,78,88,89,92,93,94,95,96,97,98,99,100,102,103,105,110,113,114,117,],[-41,64,-25,-26,-27,-31,-30,-32,64,64,-61,-59,64,-34,64,64,64,-42,64,64,-53,-54,64,64,-57,-58,-60,-33,64,64,-62,64,-43,-63,]),'/':([16,34,35,36,37,41,42,43,49,58,70,71,72,75,77,78,88,89,92,93,94,95,96,97,98,99,100,102,103,105,110,113,114,117,],[-41,65,-25,-26,-27,-31,-30,-32,65,65,-61,-59,65,-34,65,65,65,-42,65,65,-53,-54,65,65,-57,-58,-60,-33,65,65,-62,65,-43,-63,]),'DOTADD':([16,34,35,36,37,41,42,43,49,58,70,71,72,75,77,78,88,89,92,93,94,95,96,97,98,99,100,102,103,105,110,113,114,117,],[-41,66,-25,-26,-27,-31,-30,-32,66,66,-61,-59,66,-34,66,66,66,-42,66,66,-53,-54,-55,-56,-57,-58,-60,-33,66,66,-62,66,-43,-63,]),'DOTSUB':([16,34,35,36,37,41,42,43,49,58,70,71,72,75,77,78,88,89,92,93,94,95,96,97,98,99,100,102,103,105,110,113,114,117,],[-41,67,-25,-26,-27,-31,-30,-32,67,67,-61,-59,67,-34,67,67,67,-42,67,67,-53,-54,-55,-56,-57,-58,-60,-33,67,67,-62,67,-43,-63,]),'DOTMUL':([16,34,35,36,37,41,42,43,49,58,70,71,72,75,77,78,88,89,92,93,94,95,96,97,98,99,100,102,103,105,110,113,114,117,],[-41,68,-25,-26,-27,-31,-30,-32,68,68,-61,-59,68,-34,68,68,68,-42,68,68,68,68,68,68,-57,-58,-60,-33,68,68,-62,68,-43,-63,]),'DOTDIV':([16,34,35,36,37,41,42,43,49,58,70,71,72,75,77,78,88,89,92,93,94,95,96,97,98,99,100,102,103,105,110,113,114,117,],[-41,69,-25,-26,-27,-31,-30,-32,69,69,-61,-59,69,-34,69,69,69,-42,69,69,69,69,69,69,-57,-58,-60,-33,69,69,-62,69,-43,-63,]),"'":([16,34,35,36,37,41,42,43,49,58,70,71,72,75,77,78,88,89,92,93,94,95,96,97,98,99,100,102,103,105,110,113,114,117,],[-41,70,-25,-26,-27,-31,-30,-32,70,70,-61,-59,70,-34,70,70,70,-42,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,70,70,-62,70,-43,-63,]),',':([16,35,36,37,41,42,43,48,49,60,70,71,74,75,89,92,93,94,95,96,97,98,99,100,101,102,103,110,114,117,],[-41,-25,-26,-27,-31,-30,-32,76,-29,90,-61,-59,76,-34,-42,-51,-52,-53,-54,-55,-56,-57,-58,-60,111,-33,-28,-62,-43,-63,]),'<':([16,35,36,37,41,42,43,58,70,71,75,89,92,93,94,95,96,97,98,99,100,102,110,114,117,],[-41,-25,-26,-27,-31,-30,-32,81,-61,-59,-34,-42,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-62,-43,-63,]),'>':([16,35,36,37,41,42,43,58,70,71,75,89,92,93,94,95,96,97,98,99,100,102,110,114,117,],[-41,-25,-26,-27,-31,-30,-32,82,-61,-59,-34,-42,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-62,-43,-63,]),'EQUAL':([16,35,36,37,41,42,43,58,70,71,75,89,92,93,94,95,96,97,98,99,100,102,110,114,117,],[-41,-25,-26,-27,-31,-30,-32,83,-61,-59,-34,-42,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-62,-43,-63,]),'NOTEQUAL':([16,35,36,37,41,42,43,58,70,71,75,89,92,93,94,95,96,97,98,99,100,102,110,114,117,],[-41,-25,-26,-27,-31,-30,-32,84,-61,-59,-34,-42,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-62,-43,-63,]),'LESSEQUAL':([16,35,36,37,41,42,43,58,70,71,75,89,92,93,94,95,96,97,98,99,100,102,110,114,117,],[-41,-25,-26,-27,-31,-30,-32,85,-61,-59,-34,-42,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-62,-43,-63,]),'GREATEREQUAL':([16,35,36,37,41,42,43,58,70,71,75,89,92,93,94,95,96,97,98,99,100,102,110,114,117,],[-41,-25,-26,-27,-31,-30,-32,86,-61,-59,-34,-42,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-62,-43,-63,]),')':([16,35,36,37,41,42,43,57,61,70,71,72,75,89,92,93,94,95,96,97,98,99,100,101,102,105,110,114,115,117,],[-41,-25,-26,-27,-31,-30,-32,79,91,-61,-59,100,-34,-42,-51,-52,-53,-54,-55,-56,-57,-58,-60,110,-33,-50,-62,-43,117,-63,]),']':([16,35,36,37,41,42,43,44,49,60,70,71,74,75,89,92,93,94,95,96,97,98,99,100,102,103,108,110,114,117,],[-41,-25,-26,-27,-31,-30,-32,75,-29,89,-61,-59,102,-34,-42,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-28,114,-62,-43,-63,]),':':([16,35,36,37,41,42,43,70,71,75,88,89,92,93,94,95,96,97,98,99,100,102,110,114,117,],[-41,-25,-26,-27,-31,-30,-32,-61,-59,-34,107,-42,-51,-52,-53,-54,-55,-56,-57,-58,-60,-33,-62,-43,-63,]),'[':([16,20,21,30,33,38,39,44,50,51,52,53,54,55,59,62,63,64,65,66,67,68,69,76,80,81,82,83,84,85,86,107,],[32,44,44,44,44,44,44,44,44,44,-37,-38,-39,-40,44,44,44,44,44,44,44,44,44,44,44,-44,-45,-46,-47,-48,-49,44,]),'STRING':([20,21,30,33,38,39,44,50,51,52,53,54,55,59,62,63,64,65,66,67,68,69,76,80,81,82,83,84,85,86,107,],[42,42,42,42,42,42,42,42,42,-37,-38,-39,-40,42,42,42,42,42,42,42,42,42,42,42,-44,-45,-46,-47,-48,-49,42,]),'INTEGER':([20,21,30,32,33,38,39,44,50,51,52,53,54,55,59,62,63,64,65,66,67,68,69,73,76,80,81,82,83,84,85,86,90,107,111,],[41,41,41,60,41,41,41,41,41,41,-37,-38,-39,-40,41,41,41,41,41,41,41,41,41,101,41,41,-44,-45,-46,-47,-48,-49,108,41,115,]),'FLOAT':([20,21,30,33,38,39,44,50,51,52,53,54,55,59,62,63,64,65,66,67,68,69,76,80,81,82,83,84,85,86,107,],[43,43,43,43,43,43,43,43,43,-37,-38,-39,-40,43,43,43,43,43,43,43,43,43,43,43,-44,-45,-46,-47,-48,-49,43,]),'EYE':([20,21,30,33,38,39,44,50,51,52,53,54,55,59,62,63,64,65,66,67,68,69,76,80,81,82,83,84,85,86,107,],[45,45,45,45,45,45,45,45,45,-37,-38,-39,-40,45,45,45,45,45,45,45,45,45,45,45,-44,-45,-46,-47,-48,-49,45,]),'ONES':([20,21,30,33,38,39,44,50,51,52,53,54,55,59,62,63,64,65,66,67,68,69,76,80,81,82,83,84,85,86,107,],[46,46,46,46,46,46,46,46,46,-37,-38,-39,-40,46,46,46,46,46,46,46,46,46,46,46,-44,-45,-46,-47,-48,-49,46,]),'ZEROS':([20,21,30,33,38,39,44,50,51,52,53,54,55,59,62,63,64,65,66,67,68,69,76,80,81,82,83,84,85,86,107,],[47,47,47,47,47,47,47,47,47,-37,-38,-39,-40,47,47,47,47,47,47,47,47,47,47,47,-44,-45,-46,-47,-48,-49,47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,13,],[2,29,]),'instruction':([0,2,13,29,79,87,91,112,],[3,23,3,23,104,106,109,116,]),'block':([0,2,13,29,79,87,91,112,],[4,4,4,4,4,4,4,4,]),'if':([0,2,13,29,79,87,91,112,],[5,5,5,5,5,5,5,5,]),'for':([0,2,13,29,79,87,91,112,],[6,6,6,6,6,6,6,6,]),'while':([0,2,13,29,79,87,91,112,],[7,7,7,7,7,7,7,7,]),'break':([0,2,13,29,79,87,91,112,],[8,8,8,8,8,8,8,8,]),'continue':([0,2,13,29,79,87,91,112,],[9,9,9,9,9,9,9,9,]),'return':([0,2,13,29,79,87,91,112,],[10,10,10,10,10,10,10,10,]),'print':([0,2,13,29,79,87,91,112,],[11,11,11,11,11,11,11,11,]),'assign':([0,2,13,29,79,87,91,112,],[12,12,12,12,12,12,12,12,]),'variable':([0,2,13,20,21,29,30,33,38,39,44,50,51,59,62,63,64,65,66,67,68,69,76,79,80,87,91,107,112,],[22,22,22,37,37,22,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,22,37,22,22,37,22,]),'expression':([20,21,30,33,38,39,44,50,51,59,62,63,64,65,66,67,68,69,76,80,107,],[34,49,58,58,71,72,49,77,78,88,92,93,94,95,96,97,98,99,103,105,113,]),'singleton':([20,21,30,33,38,39,44,50,51,59,62,63,64,65,66,67,68,69,76,80,107,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'vector':([20,21,30,33,38,39,44,50,51,59,62,63,64,65,66,67,68,69,76,80,107,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'matrix_func':([20,21,30,33,38,39,44,50,51,59,62,63,64,65,66,67,68,69,76,80,107,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'expressions':([21,44,],[48,74,]),'calculation_assign':([22,],[51,]),'condition':([30,33,],[57,61,]),'comparator':([58,],[80,]),'range':([59,],[87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','Mparser.py',28),
  ('program -> <empty>','program',0,'p_program','Mparser.py',29),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Mparser.py',38),
  ('instructions -> instruction','instructions',1,'p_instructions','Mparser.py',39),
  ('instruction -> block','instruction',1,'p_instruction','Mparser.py',48),
  ('instruction -> if','instruction',1,'p_instruction','Mparser.py',49),
  ('instruction -> for','instruction',1,'p_instruction','Mparser.py',50),
  ('instruction -> while','instruction',1,'p_instruction','Mparser.py',51),
  ('instruction -> break ;','instruction',2,'p_instruction','Mparser.py',52),
  ('instruction -> continue ;','instruction',2,'p_instruction','Mparser.py',53),
  ('instruction -> return ;','instruction',2,'p_instruction','Mparser.py',54),
  ('instruction -> print ;','instruction',2,'p_instruction','Mparser.py',55),
  ('instruction -> assign ;','instruction',2,'p_instruction','Mparser.py',56),
  ('block -> { instructions }','block',3,'p_block','Mparser.py',62),
  ('if -> IF ( condition ) instruction','if',5,'p_if','Mparser.py',68),
  ('if -> IF ( condition ) instruction ELSE instruction','if',7,'p_if','Mparser.py',69),
  ('for -> FOR ID = range instruction','for',5,'p_for','Mparser.py',78),
  ('range -> expression : expression','range',3,'p_range','Mparser.py',84),
  ('while -> WHILE ( condition ) instruction','while',5,'p_while','Mparser.py',90),
  ('break -> BREAK','break',1,'p_break','Mparser.py',96),
  ('continue -> CONTINUE','continue',1,'p_continue','Mparser.py',102),
  ('return -> RETURN','return',1,'p_return','Mparser.py',109),
  ('return -> RETURN expression','return',2,'p_return','Mparser.py',110),
  ('print -> PRINT expressions','print',2,'p_print','Mparser.py',119),
  ('expression -> singleton','expression',1,'p_expression','Mparser.py',125),
  ('expression -> vector','expression',1,'p_expression','Mparser.py',126),
  ('expression -> variable','expression',1,'p_expression','Mparser.py',127),
  ('expressions -> expressions , expression','expressions',3,'p_expressions','Mparser.py',133),
  ('expressions -> expression','expressions',1,'p_expressions','Mparser.py',134),
  ('singleton -> STRING','singleton',1,'p_singleton','Mparser.py',143),
  ('singleton -> INTEGER','singleton',1,'p_singleton','Mparser.py',144),
  ('singleton -> FLOAT','singleton',1,'p_singleton','Mparser.py',145),
  ('vector -> [ expressions ]','vector',3,'p_vector','Mparser.py',151),
  ('vector -> [ ]','vector',2,'p_vector','Mparser.py',152),
  ('assign -> variable = expression','assign',3,'p_assign','Mparser.py',161),
  ('assign -> variable calculation_assign expression','assign',3,'p_assign','Mparser.py',162),
  ('calculation_assign -> ADDASSIGN','calculation_assign',1,'p_calculation_assign','Mparser.py',168),
  ('calculation_assign -> SUBASSIGN','calculation_assign',1,'p_calculation_assign','Mparser.py',169),
  ('calculation_assign -> MULASSIGN','calculation_assign',1,'p_calculation_assign','Mparser.py',170),
  ('calculation_assign -> DIVASSIGN','calculation_assign',1,'p_calculation_assign','Mparser.py',171),
  ('variable -> ID','variable',1,'p_variable','Mparser.py',177),
  ('variable -> ID [ INTEGER ]','variable',4,'p_variable','Mparser.py',178),
  ('variable -> ID [ INTEGER , INTEGER ]','variable',6,'p_variable','Mparser.py',179),
  ('comparator -> <','comparator',1,'p_comparator','Mparser.py',190),
  ('comparator -> >','comparator',1,'p_comparator','Mparser.py',191),
  ('comparator -> EQUAL','comparator',1,'p_comparator','Mparser.py',192),
  ('comparator -> NOTEQUAL','comparator',1,'p_comparator','Mparser.py',193),
  ('comparator -> LESSEQUAL','comparator',1,'p_comparator','Mparser.py',194),
  ('comparator -> GREATEREQUAL','comparator',1,'p_comparator','Mparser.py',195),
  ('condition -> expression comparator expression','condition',3,'p_condition','Mparser.py',201),
  ('expression -> expression + expression','expression',3,'p_expression_binop','Mparser.py',207),
  ('expression -> expression - expression','expression',3,'p_expression_binop','Mparser.py',208),
  ('expression -> expression * expression','expression',3,'p_expression_binop','Mparser.py',209),
  ('expression -> expression / expression','expression',3,'p_expression_binop','Mparser.py',210),
  ('expression -> expression DOTADD expression','expression',3,'p_expression_matrixop','Mparser.py',216),
  ('expression -> expression DOTSUB expression','expression',3,'p_expression_matrixop','Mparser.py',217),
  ('expression -> expression DOTMUL expression','expression',3,'p_expression_matrixop','Mparser.py',218),
  ('expression -> expression DOTDIV expression','expression',3,'p_expression_matrixop','Mparser.py',219),
  ('expression -> - expression','expression',2,'p_expression_uminus','Mparser.py',225),
  ('expression -> ( expression )','expression',3,'p_expression_parentheses','Mparser.py',231),
  ("expression -> expression '",'expression',2,'p_expression_transpose','Mparser.py',237),
  ('expression -> matrix_func ( INTEGER )','expression',4,'p_expression_matrix_functions','Mparser.py',243),
  ('expression -> matrix_func ( INTEGER , INTEGER )','expression',6,'p_expression_matrix_functions','Mparser.py',244),
  ('matrix_func -> EYE','matrix_func',1,'p_matrix_function','Mparser.py',253),
  ('matrix_func -> ONES','matrix_func',1,'p_matrix_function','Mparser.py',254),
  ('matrix_func -> ZEROS','matrix_func',1,'p_matrix_function','Mparser.py',255),
]
