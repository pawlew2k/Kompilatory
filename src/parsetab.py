
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSEnonassoc=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNnonassoc<>LESSEQUALGREATEREQUALEQUALNOTEQUALleft+-leftDOTADDDOTSUBleft*/leftDOTMULDOTDIVrightUMINUSADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQUAL EYE FLOAT FOR GREATEREQUAL ID IF INTEGER LESSEQUAL MULASSIGN NOTEQUAL ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROS program : instructions\n                |  instructions : instructions instruction\n                     | instruction  instruction : block\n                    | if\n                    | for\n                    | while\n                    | break\n                    | continue\n                    | return\n                    | print\n                    | assign  block : \'{\' instructions \'}\'  if : IF \'(\' condition \')\' instruction %prec IFX\n           | IF \'(\' condition \')\' instruction ELSE instruction  for : FOR ID \'=\' range instruction  range : expression \':\' expression  while : WHILE \'(\' condition \')\' instruction  break : BREAK \';\'  continue : CONTINUE \';\'  return : RETURN \';\'\n               | RETURN expression \';\'  print : PRINT expressions \';\'  expression : singleton\n                   | vector\n                   | matrix\n                   | variable  expressions : expressions \',\' expression\n                    | expression  singleton : STRING\n                  | number  number : INTEGER\n               | FLOAT  numbers : numbers \',\' number\n                | number\n                |  vector : \'[\' numbers \']\'  vectors : vectors \',\' vector\n                | vector  matrix : \'[\' vectors \']\'  assign : variable \'=\' expression \';\'\n               | variable calculation_assign expression \';\'  calculation_assign : ADDASSIGN\n                           | SUBASSIGN\n                           | MULASSIGN\n                           | DIVASSIGN  variable : ID\n               | ID \'[\' INTEGER \']\'\n               | ID \'[\' INTEGER \',\' INTEGER \']\'  comparator : \'<\'\n                   | \'>\'\n                   | EQUAL\n                   | NOTEQUAL\n                   | LESSEQUAL\n                   | GREATEREQUAL  condition : expression comparator expression  expression : expression \'+\' expression\n                   | expression \'-\' expression\n                   | expression \'*\' expression\n                   | expression \'/\' expression  expression : expression DOTADD expression\n                   | expression DOTSUB expression\n                   | expression DOTMUL expression\n                   | expression DOTDIV expression  expression : \'-\' expression %prec UMINUS  expression : \'(\' expression \')\'  expression : expression "\'"  expression : matrix_func \'(\' INTEGER \')\' \n                   | matrix_func \'(\' INTEGER \',\' INTEGER \')\'  matrix_func : EYE\n                    | ONES\n                    | ZEROS '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,23,29,30,31,56,62,80,112,113,114,116,119,128,],[-2,0,-1,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,-20,-21,-22,-14,-23,-24,-42,-43,-15,-17,-19,-16,]),'{':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,23,24,29,30,31,33,34,35,36,40,41,42,47,56,62,71,72,80,84,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,119,120,124,125,126,128,129,],[13,13,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,13,-48,-3,13,-20,-21,-22,-25,-26,-27,-28,-33,-31,-32,-34,-14,-23,-68,-66,-24,13,13,-49,13,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-42,-43,-15,-17,-19,-69,13,-18,-50,-16,-70,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,23,24,29,30,31,33,34,35,36,40,41,42,47,56,62,71,72,80,84,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,119,120,124,125,126,128,129,],[14,14,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,14,-48,-3,14,-20,-21,-22,-25,-26,-27,-28,-33,-31,-32,-34,-14,-23,-68,-66,-24,14,14,-49,14,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-42,-43,-15,-17,-19,-69,14,-18,-50,-16,-70,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,23,24,29,30,31,33,34,35,36,40,41,42,47,56,62,71,72,80,84,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,119,120,124,125,126,128,129,],[15,15,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,15,-48,-3,15,-20,-21,-22,-25,-26,-27,-28,-33,-31,-32,-34,-14,-23,-68,-66,-24,15,15,-49,15,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-42,-43,-15,-17,-19,-69,15,-18,-50,-16,-70,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,23,24,29,30,31,33,34,35,36,40,41,42,47,56,62,71,72,80,84,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,119,120,124,125,126,128,129,],[17,17,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,17,-48,-3,17,-20,-21,-22,-25,-26,-27,-28,-33,-31,-32,-34,-14,-23,-68,-66,-24,17,17,-49,17,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-42,-43,-15,-17,-19,-69,17,-18,-50,-16,-70,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,23,24,29,30,31,33,34,35,36,40,41,42,47,56,62,71,72,80,84,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,119,120,124,125,126,128,129,],[18,18,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,18,-48,-3,18,-20,-21,-22,-25,-26,-27,-28,-33,-31,-32,-34,-14,-23,-68,-66,-24,18,18,-49,18,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-42,-43,-15,-17,-19,-69,18,-18,-50,-16,-70,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,23,24,29,30,31,33,34,35,36,40,41,42,47,56,62,71,72,80,84,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,119,120,124,125,126,128,129,],[19,19,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,19,-48,-3,19,-20,-21,-22,-25,-26,-27,-28,-33,-31,-32,-34,-14,-23,-68,-66,-24,19,19,-49,19,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-42,-43,-15,-17,-19,-69,19,-18,-50,-16,-70,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,23,24,29,30,31,33,34,35,36,40,41,42,47,56,62,71,72,80,84,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,119,120,124,125,126,128,129,],[20,20,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,20,-48,-3,20,-20,-21,-22,-25,-26,-27,-28,-33,-31,-32,-34,-14,-23,-68,-66,-24,20,20,-49,20,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-42,-43,-15,-17,-19,-69,20,-18,-50,-16,-70,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,23,24,29,30,31,33,34,35,36,40,41,42,47,56,62,71,72,80,84,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,119,120,124,125,126,128,129,],[21,21,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,21,-48,-3,21,-20,-21,-22,-25,-26,-27,-28,-33,-31,-32,-34,-14,-23,-68,-66,-24,21,21,-49,21,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-42,-43,-15,-17,-19,-69,21,-18,-50,-16,-70,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,16,20,21,23,24,25,28,29,30,31,33,34,35,36,37,38,40,41,42,47,50,51,52,53,54,55,56,59,62,63,64,65,66,67,68,69,70,71,72,80,81,84,85,86,87,88,89,90,91,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,117,119,120,124,125,126,128,129,],[16,16,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,16,26,-48,16,16,-3,16,16,16,-20,-21,-22,-25,-26,-27,-28,16,16,-33,-31,-32,-34,16,16,-44,-45,-46,-47,-14,16,-23,16,16,16,16,16,16,16,16,-68,-66,-24,16,16,16,-51,-52,-53,-54,-55,-56,16,-49,16,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-42,-43,-15,-17,16,-19,-69,16,-18,-50,-16,-70,]),'}':([3,4,5,6,7,8,9,10,11,12,23,24,29,30,31,56,62,80,112,113,114,116,119,128,],[-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,56,-20,-21,-22,-14,-23,-24,-42,-43,-15,-17,-19,-16,]),'ELSE':([4,5,6,7,8,9,10,11,12,29,30,31,56,62,80,112,113,114,116,119,128,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-20,-21,-22,-14,-23,-24,-42,-43,124,-17,-19,-16,]),'(':([14,17,20,21,25,28,37,38,39,44,45,46,50,51,52,53,54,55,59,63,64,65,66,67,68,69,70,81,85,86,87,88,89,90,91,117,],[25,28,38,38,38,38,38,38,74,-71,-72,-73,38,38,-44,-45,-46,-47,38,38,38,38,38,38,38,38,38,38,38,-51,-52,-53,-54,-55,-56,38,]),'=':([16,22,26,94,126,],[-48,50,59,-49,-50,]),'ADDASSIGN':([16,22,94,126,],[-48,52,-49,-50,]),'SUBASSIGN':([16,22,94,126,],[-48,53,-49,-50,]),'MULASSIGN':([16,22,94,126,],[-48,54,-49,-50,]),'DIVASSIGN':([16,22,94,126,],[-48,55,-49,-50,]),';':([16,18,19,20,32,33,34,35,36,40,41,42,47,48,49,71,72,82,83,94,97,98,99,100,101,102,103,104,105,107,109,111,120,126,129,],[-48,29,30,31,62,-25,-26,-27,-28,-33,-31,-32,-34,80,-30,-68,-66,112,113,-49,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-29,-69,-50,-70,]),'+':([16,32,33,34,35,36,40,41,42,47,49,58,71,72,73,82,83,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,120,125,126,129,],[-48,63,-25,-26,-27,-28,-33,-31,-32,-34,63,63,-68,-66,63,63,63,63,-49,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,63,63,-69,63,-50,-70,]),'-':([16,20,21,25,28,32,33,34,35,36,37,38,40,41,42,47,49,50,51,52,53,54,55,58,59,63,64,65,66,67,68,69,70,71,72,73,81,82,83,85,86,87,88,89,90,91,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,117,120,125,126,129,],[-48,37,37,37,37,64,-25,-26,-27,-28,37,37,-33,-31,-32,-34,64,37,37,-44,-45,-46,-47,64,37,37,37,37,37,37,37,37,37,-68,-66,64,37,64,64,37,-51,-52,-53,-54,-55,-56,64,-49,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,64,64,37,-69,64,-50,-70,]),'*':([16,32,33,34,35,36,40,41,42,47,49,58,71,72,73,82,83,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,120,125,126,129,],[-48,65,-25,-26,-27,-28,-33,-31,-32,-34,65,65,-68,-66,65,65,65,65,-49,65,65,-60,-61,65,65,-64,-65,-67,-38,-41,65,65,-69,65,-50,-70,]),'/':([16,32,33,34,35,36,40,41,42,47,49,58,71,72,73,82,83,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,120,125,126,129,],[-48,66,-25,-26,-27,-28,-33,-31,-32,-34,66,66,-68,-66,66,66,66,66,-49,66,66,-60,-61,66,66,-64,-65,-67,-38,-41,66,66,-69,66,-50,-70,]),'DOTADD':([16,32,33,34,35,36,40,41,42,47,49,58,71,72,73,82,83,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,120,125,126,129,],[-48,67,-25,-26,-27,-28,-33,-31,-32,-34,67,67,-68,-66,67,67,67,67,-49,67,67,-60,-61,-62,-63,-64,-65,-67,-38,-41,67,67,-69,67,-50,-70,]),'DOTSUB':([16,32,33,34,35,36,40,41,42,47,49,58,71,72,73,82,83,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,120,125,126,129,],[-48,68,-25,-26,-27,-28,-33,-31,-32,-34,68,68,-68,-66,68,68,68,68,-49,68,68,-60,-61,-62,-63,-64,-65,-67,-38,-41,68,68,-69,68,-50,-70,]),'DOTMUL':([16,32,33,34,35,36,40,41,42,47,49,58,71,72,73,82,83,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,120,125,126,129,],[-48,69,-25,-26,-27,-28,-33,-31,-32,-34,69,69,-68,-66,69,69,69,69,-49,69,69,69,69,69,69,-64,-65,-67,-38,-41,69,69,-69,69,-50,-70,]),'DOTDIV':([16,32,33,34,35,36,40,41,42,47,49,58,71,72,73,82,83,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,120,125,126,129,],[-48,70,-25,-26,-27,-28,-33,-31,-32,-34,70,70,-68,-66,70,70,70,70,-49,70,70,70,70,70,70,-64,-65,-67,-38,-41,70,70,-69,70,-50,-70,]),"'":([16,32,33,34,35,36,40,41,42,47,49,58,71,72,73,82,83,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,120,125,126,129,],[-48,71,-25,-26,-27,-28,-33,-31,-32,-34,71,71,-68,-66,71,71,71,71,-49,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,71,71,-69,71,-50,-70,]),',':([16,33,34,35,36,40,41,42,43,47,48,49,60,71,72,75,76,77,78,79,94,97,98,99,100,101,102,103,104,105,106,107,109,111,120,122,123,126,129,],[-48,-25,-26,-27,-28,-33,-31,-32,-37,-34,81,-30,95,-68,-66,-37,108,110,-36,-40,-49,-58,-59,-60,-61,-62,-63,-64,-65,-67,121,-38,-41,-29,-69,-35,-39,-50,-70,]),'<':([16,33,34,35,36,40,41,42,47,58,71,72,94,97,98,99,100,101,102,103,104,105,107,109,120,126,129,],[-48,-25,-26,-27,-28,-33,-31,-32,-34,86,-68,-66,-49,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-69,-50,-70,]),'>':([16,33,34,35,36,40,41,42,47,58,71,72,94,97,98,99,100,101,102,103,104,105,107,109,120,126,129,],[-48,-25,-26,-27,-28,-33,-31,-32,-34,87,-68,-66,-49,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-69,-50,-70,]),'EQUAL':([16,33,34,35,36,40,41,42,47,58,71,72,94,97,98,99,100,101,102,103,104,105,107,109,120,126,129,],[-48,-25,-26,-27,-28,-33,-31,-32,-34,88,-68,-66,-49,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-69,-50,-70,]),'NOTEQUAL':([16,33,34,35,36,40,41,42,47,58,71,72,94,97,98,99,100,101,102,103,104,105,107,109,120,126,129,],[-48,-25,-26,-27,-28,-33,-31,-32,-34,89,-68,-66,-49,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-69,-50,-70,]),'LESSEQUAL':([16,33,34,35,36,40,41,42,47,58,71,72,94,97,98,99,100,101,102,103,104,105,107,109,120,126,129,],[-48,-25,-26,-27,-28,-33,-31,-32,-34,90,-68,-66,-49,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-69,-50,-70,]),'GREATEREQUAL':([16,33,34,35,36,40,41,42,47,58,71,72,94,97,98,99,100,101,102,103,104,105,107,109,120,126,129,],[-48,-25,-26,-27,-28,-33,-31,-32,-34,91,-68,-66,-49,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-69,-50,-70,]),')':([16,33,34,35,36,40,41,42,47,57,61,71,72,73,94,97,98,99,100,101,102,103,104,105,106,107,109,115,120,126,127,129,],[-48,-25,-26,-27,-28,-33,-31,-32,-34,84,96,-68,-66,105,-49,-58,-59,-60,-61,-62,-63,-64,-65,-67,120,-38,-41,-57,-69,-50,129,-70,]),':':([16,33,34,35,36,40,41,42,47,71,72,93,94,97,98,99,100,101,102,103,104,105,107,109,120,126,129,],[-48,-25,-26,-27,-28,-33,-31,-32,-34,-68,-66,117,-49,-58,-59,-60,-61,-62,-63,-64,-65,-67,-38,-41,-69,-50,-70,]),'[':([16,20,21,25,28,37,38,43,50,51,52,53,54,55,59,63,64,65,66,67,68,69,70,81,85,86,87,88,89,90,91,110,117,],[27,43,43,43,43,43,43,75,43,43,-44,-45,-46,-47,43,43,43,43,43,43,43,43,43,43,43,-51,-52,-53,-54,-55,-56,75,43,]),'STRING':([20,21,25,28,37,38,50,51,52,53,54,55,59,63,64,65,66,67,68,69,70,81,85,86,87,88,89,90,91,117,],[41,41,41,41,41,41,41,41,-44,-45,-46,-47,41,41,41,41,41,41,41,41,41,41,41,-51,-52,-53,-54,-55,-56,41,]),'EYE':([20,21,25,28,37,38,50,51,52,53,54,55,59,63,64,65,66,67,68,69,70,81,85,86,87,88,89,90,91,117,],[44,44,44,44,44,44,44,44,-44,-45,-46,-47,44,44,44,44,44,44,44,44,44,44,44,-51,-52,-53,-54,-55,-56,44,]),'ONES':([20,21,25,28,37,38,50,51,52,53,54,55,59,63,64,65,66,67,68,69,70,81,85,86,87,88,89,90,91,117,],[45,45,45,45,45,45,45,45,-44,-45,-46,-47,45,45,45,45,45,45,45,45,45,45,45,-51,-52,-53,-54,-55,-56,45,]),'ZEROS':([20,21,25,28,37,38,50,51,52,53,54,55,59,63,64,65,66,67,68,69,70,81,85,86,87,88,89,90,91,117,],[46,46,46,46,46,46,46,46,-44,-45,-46,-47,46,46,46,46,46,46,46,46,46,46,46,-51,-52,-53,-54,-55,-56,46,]),'INTEGER':([20,21,25,27,28,37,38,43,50,51,52,53,54,55,59,63,64,65,66,67,68,69,70,74,75,81,85,86,87,88,89,90,91,95,108,117,121,],[40,40,40,60,40,40,40,40,40,40,-44,-45,-46,-47,40,40,40,40,40,40,40,40,40,106,40,40,40,-51,-52,-53,-54,-55,-56,118,40,40,127,]),'FLOAT':([20,21,25,28,37,38,43,50,51,52,53,54,55,59,63,64,65,66,67,68,69,70,75,81,85,86,87,88,89,90,91,108,117,],[47,47,47,47,47,47,47,47,47,-44,-45,-46,-47,47,47,47,47,47,47,47,47,47,47,47,47,-51,-52,-53,-54,-55,-56,47,47,]),']':([40,43,47,60,75,76,77,78,79,107,118,122,123,],[-33,-37,-34,94,-37,107,109,-36,-40,-38,126,-35,-39,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,13,],[2,24,]),'instruction':([0,2,13,24,84,92,96,124,],[3,23,3,23,114,116,119,128,]),'block':([0,2,13,24,84,92,96,124,],[4,4,4,4,4,4,4,4,]),'if':([0,2,13,24,84,92,96,124,],[5,5,5,5,5,5,5,5,]),'for':([0,2,13,24,84,92,96,124,],[6,6,6,6,6,6,6,6,]),'while':([0,2,13,24,84,92,96,124,],[7,7,7,7,7,7,7,7,]),'break':([0,2,13,24,84,92,96,124,],[8,8,8,8,8,8,8,8,]),'continue':([0,2,13,24,84,92,96,124,],[9,9,9,9,9,9,9,9,]),'return':([0,2,13,24,84,92,96,124,],[10,10,10,10,10,10,10,10,]),'print':([0,2,13,24,84,92,96,124,],[11,11,11,11,11,11,11,11,]),'assign':([0,2,13,24,84,92,96,124,],[12,12,12,12,12,12,12,12,]),'variable':([0,2,13,20,21,24,25,28,37,38,50,51,59,63,64,65,66,67,68,69,70,81,84,85,92,96,117,124,],[22,22,22,36,36,22,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,22,36,22,22,36,22,]),'expression':([20,21,25,28,37,38,50,51,59,63,64,65,66,67,68,69,70,81,85,117,],[32,49,58,58,72,73,82,83,93,97,98,99,100,101,102,103,104,111,115,125,]),'singleton':([20,21,25,28,37,38,50,51,59,63,64,65,66,67,68,69,70,81,85,117,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'vector':([20,21,25,28,37,38,43,50,51,59,63,64,65,66,67,68,69,70,81,85,110,117,],[34,34,34,34,34,34,79,34,34,34,34,34,34,34,34,34,34,34,34,34,123,34,]),'matrix':([20,21,25,28,37,38,50,51,59,63,64,65,66,67,68,69,70,81,85,117,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'matrix_func':([20,21,25,28,37,38,50,51,59,63,64,65,66,67,68,69,70,81,85,117,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'number':([20,21,25,28,37,38,43,50,51,59,63,64,65,66,67,68,69,70,75,81,85,108,117,],[42,42,42,42,42,42,78,42,42,42,42,42,42,42,42,42,42,42,78,42,42,122,42,]),'expressions':([21,],[48,]),'calculation_assign':([22,],[51,]),'condition':([25,28,],[57,61,]),'numbers':([43,75,],[76,76,]),'vectors':([43,],[77,]),'comparator':([58,],[85,]),'range':([59,],[92,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','Mparser.py',28),
  ('program -> <empty>','program',0,'p_program','Mparser.py',29),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Mparser.py',37),
  ('instructions -> instruction','instructions',1,'p_instructions','Mparser.py',38),
  ('instruction -> block','instruction',1,'p_instruction','Mparser.py',46),
  ('instruction -> if','instruction',1,'p_instruction','Mparser.py',47),
  ('instruction -> for','instruction',1,'p_instruction','Mparser.py',48),
  ('instruction -> while','instruction',1,'p_instruction','Mparser.py',49),
  ('instruction -> break','instruction',1,'p_instruction','Mparser.py',50),
  ('instruction -> continue','instruction',1,'p_instruction','Mparser.py',51),
  ('instruction -> return','instruction',1,'p_instruction','Mparser.py',52),
  ('instruction -> print','instruction',1,'p_instruction','Mparser.py',53),
  ('instruction -> assign','instruction',1,'p_instruction','Mparser.py',54),
  ('block -> { instructions }','block',3,'p_block','Mparser.py',59),
  ('if -> IF ( condition ) instruction','if',5,'p_if','Mparser.py',64),
  ('if -> IF ( condition ) instruction ELSE instruction','if',7,'p_if','Mparser.py',65),
  ('for -> FOR ID = range instruction','for',5,'p_for','Mparser.py',73),
  ('range -> expression : expression','range',3,'p_range','Mparser.py',78),
  ('while -> WHILE ( condition ) instruction','while',5,'p_while','Mparser.py',83),
  ('break -> BREAK ;','break',2,'p_break','Mparser.py',88),
  ('continue -> CONTINUE ;','continue',2,'p_continue','Mparser.py',93),
  ('return -> RETURN ;','return',2,'p_return','Mparser.py',98),
  ('return -> RETURN expression ;','return',3,'p_return','Mparser.py',99),
  ('print -> PRINT expressions ;','print',3,'p_print','Mparser.py',107),
  ('expression -> singleton','expression',1,'p_expression','Mparser.py',112),
  ('expression -> vector','expression',1,'p_expression','Mparser.py',113),
  ('expression -> matrix','expression',1,'p_expression','Mparser.py',114),
  ('expression -> variable','expression',1,'p_expression','Mparser.py',115),
  ('expressions -> expressions , expression','expressions',3,'p_expressions','Mparser.py',120),
  ('expressions -> expression','expressions',1,'p_expressions','Mparser.py',121),
  ('singleton -> STRING','singleton',1,'p_singleton','Mparser.py',129),
  ('singleton -> number','singleton',1,'p_singleton','Mparser.py',130),
  ('number -> INTEGER','number',1,'p_number','Mparser.py',135),
  ('number -> FLOAT','number',1,'p_number','Mparser.py',136),
  ('numbers -> numbers , number','numbers',3,'p_numbers','Mparser.py',141),
  ('numbers -> number','numbers',1,'p_numbers','Mparser.py',142),
  ('numbers -> <empty>','numbers',0,'p_numbers','Mparser.py',143),
  ('vector -> [ numbers ]','vector',3,'p_vector','Mparser.py',153),
  ('vectors -> vectors , vector','vectors',3,'p_vectors','Mparser.py',158),
  ('vectors -> vector','vectors',1,'p_vectors','Mparser.py',159),
  ('matrix -> [ vectors ]','matrix',3,'p_matrix','Mparser.py',167),
  ('assign -> variable = expression ;','assign',4,'p_assign','Mparser.py',172),
  ('assign -> variable calculation_assign expression ;','assign',4,'p_assign','Mparser.py',173),
  ('calculation_assign -> ADDASSIGN','calculation_assign',1,'p_calculation_assign','Mparser.py',178),
  ('calculation_assign -> SUBASSIGN','calculation_assign',1,'p_calculation_assign','Mparser.py',179),
  ('calculation_assign -> MULASSIGN','calculation_assign',1,'p_calculation_assign','Mparser.py',180),
  ('calculation_assign -> DIVASSIGN','calculation_assign',1,'p_calculation_assign','Mparser.py',181),
  ('variable -> ID','variable',1,'p_variable','Mparser.py',186),
  ('variable -> ID [ INTEGER ]','variable',4,'p_variable','Mparser.py',187),
  ('variable -> ID [ INTEGER , INTEGER ]','variable',6,'p_variable','Mparser.py',188),
  ('comparator -> <','comparator',1,'p_comparator','Mparser.py',198),
  ('comparator -> >','comparator',1,'p_comparator','Mparser.py',199),
  ('comparator -> EQUAL','comparator',1,'p_comparator','Mparser.py',200),
  ('comparator -> NOTEQUAL','comparator',1,'p_comparator','Mparser.py',201),
  ('comparator -> LESSEQUAL','comparator',1,'p_comparator','Mparser.py',202),
  ('comparator -> GREATEREQUAL','comparator',1,'p_comparator','Mparser.py',203),
  ('condition -> expression comparator expression','condition',3,'p_condition','Mparser.py',208),
  ('expression -> expression + expression','expression',3,'p_expression_binop','Mparser.py',213),
  ('expression -> expression - expression','expression',3,'p_expression_binop','Mparser.py',214),
  ('expression -> expression * expression','expression',3,'p_expression_binop','Mparser.py',215),
  ('expression -> expression / expression','expression',3,'p_expression_binop','Mparser.py',216),
  ('expression -> expression DOTADD expression','expression',3,'p_expression_matrixop','Mparser.py',221),
  ('expression -> expression DOTSUB expression','expression',3,'p_expression_matrixop','Mparser.py',222),
  ('expression -> expression DOTMUL expression','expression',3,'p_expression_matrixop','Mparser.py',223),
  ('expression -> expression DOTDIV expression','expression',3,'p_expression_matrixop','Mparser.py',224),
  ('expression -> - expression','expression',2,'p_expression_uminus','Mparser.py',229),
  ('expression -> ( expression )','expression',3,'p_expression_parentheses','Mparser.py',234),
  ("expression -> expression '",'expression',2,'p_expression_transpose','Mparser.py',239),
  ('expression -> matrix_func ( INTEGER )','expression',4,'p_expression_matrix_functions','Mparser.py',244),
  ('expression -> matrix_func ( INTEGER , INTEGER )','expression',6,'p_expression_matrix_functions','Mparser.py',245),
  ('matrix_func -> EYE','matrix_func',1,'p_matrix_function','Mparser.py',253),
  ('matrix_func -> ONES','matrix_func',1,'p_matrix_function','Mparser.py',254),
  ('matrix_func -> ZEROS','matrix_func',1,'p_matrix_function','Mparser.py',255),
]
