
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSEright=nonassocADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNnonassoc<>LESSEQUALGREATEREQUALEQUALNOTEQUALleft+-leftDOTADDDOTSUBleft*/leftDOTMULDOTDIVrightUMINUSADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQUAL EYE FLOAT FOR GREATEREQUAL ID IF INTEGER LESSEQUAL MULASSIGN NOTEQUAL ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROS program : instructions\n                |  instructions : instructions instruction\n                    | instruction  instruction : block\n                    | if\n                    | for\n                    | while\n                    | break\n                    | continue\n                    | return\n                    | print\n                    | assign  block : \'{\' instructions \'}\'  if : IF \'(\' condition \')\' instruction %prec IFX\n           | IF \'(\' condition \')\' instruction ELSE instruction  for : FOR ID \'=\' range instruction  range : expression \':\' expression  while : WHILE \'(\' condition \')\' instruction  break : BREAK \';\'  continue : CONTINUE \';\'  return : RETURN \';\'\n               | RETURN expression \';\'  print : PRINT expressions \';\'  expressions : expressions \',\' expression\n                    | expression  type : STRING\n             | number  number : INTEGER\n               | FLOAT  expression : type\n               | vector\n               | matrix\n               | variable  numbers : numbers \',\' number\n                | number  vector : \'[\' numbers \']\'  vectors : vectors \',\' vector\n                    | vector  matrix : \'[\' vectors \']\'  assign : variable \'=\' expression \';\'\n               | variable calculation_assign expression \';\'  calculation_assign : ADDASSIGN\n                           | SUBASSIGN\n                           | MULASSIGN\n                           | DIVASSIGN  variable : ID\n               | ID \'[\' INTEGER \']\'\n               | ID \'[\' INTEGER \',\' INTEGER \']\'  comparator : \'<\'\n                   | \'>\'\n                   | EQUAL\n                   | NOTEQUAL\n                   | LESSEQUAL\n                   | GREATEREQUAL  condition : expression comparator expression  expression : expression \'+\' expression\n                   | expression \'-\' expression\n                   | expression \'*\' expression\n                   | expression \'/\' expression  expression : expression DOTADD expression\n                    | expression DOTSUB expression\n                    | expression DOTMUL expression\n                    | expression DOTDIV expression  expression : \'-\' expression %prec UMINUS  expression : \'(\' expression \')\'  expression : expression "\'"  expression : matrix_func \'(\' INTEGER \')\' \n                   | matrix_func \'(\' INTEGER \',\' INTEGER \')\'  matrix_func : EYE\n                    | ONES\n                    | ZEROS '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,23,29,30,31,56,62,80,112,113,114,116,119,128,],[-2,0,-1,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,-20,-21,-22,-14,-23,-24,-41,-42,-15,-17,-19,-16,]),'{':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,23,24,29,30,31,33,34,35,36,40,41,42,47,56,62,71,72,80,84,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,119,120,124,125,126,128,129,],[13,13,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,13,-47,-3,13,-20,-21,-22,-31,-32,-33,-34,-29,-27,-28,-30,-14,-23,-67,-65,-24,13,13,-48,13,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-41,-42,-15,-17,-19,-68,13,-18,-49,-16,-69,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,23,24,29,30,31,33,34,35,36,40,41,42,47,56,62,71,72,80,84,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,119,120,124,125,126,128,129,],[14,14,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,14,-47,-3,14,-20,-21,-22,-31,-32,-33,-34,-29,-27,-28,-30,-14,-23,-67,-65,-24,14,14,-48,14,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-41,-42,-15,-17,-19,-68,14,-18,-49,-16,-69,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,23,24,29,30,31,33,34,35,36,40,41,42,47,56,62,71,72,80,84,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,119,120,124,125,126,128,129,],[15,15,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,15,-47,-3,15,-20,-21,-22,-31,-32,-33,-34,-29,-27,-28,-30,-14,-23,-67,-65,-24,15,15,-48,15,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-41,-42,-15,-17,-19,-68,15,-18,-49,-16,-69,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,23,24,29,30,31,33,34,35,36,40,41,42,47,56,62,71,72,80,84,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,119,120,124,125,126,128,129,],[17,17,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,17,-47,-3,17,-20,-21,-22,-31,-32,-33,-34,-29,-27,-28,-30,-14,-23,-67,-65,-24,17,17,-48,17,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-41,-42,-15,-17,-19,-68,17,-18,-49,-16,-69,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,23,24,29,30,31,33,34,35,36,40,41,42,47,56,62,71,72,80,84,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,119,120,124,125,126,128,129,],[18,18,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,18,-47,-3,18,-20,-21,-22,-31,-32,-33,-34,-29,-27,-28,-30,-14,-23,-67,-65,-24,18,18,-48,18,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-41,-42,-15,-17,-19,-68,18,-18,-49,-16,-69,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,23,24,29,30,31,33,34,35,36,40,41,42,47,56,62,71,72,80,84,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,119,120,124,125,126,128,129,],[19,19,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,19,-47,-3,19,-20,-21,-22,-31,-32,-33,-34,-29,-27,-28,-30,-14,-23,-67,-65,-24,19,19,-48,19,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-41,-42,-15,-17,-19,-68,19,-18,-49,-16,-69,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,23,24,29,30,31,33,34,35,36,40,41,42,47,56,62,71,72,80,84,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,119,120,124,125,126,128,129,],[20,20,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,20,-47,-3,20,-20,-21,-22,-31,-32,-33,-34,-29,-27,-28,-30,-14,-23,-67,-65,-24,20,20,-48,20,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-41,-42,-15,-17,-19,-68,20,-18,-49,-16,-69,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,23,24,29,30,31,33,34,35,36,40,41,42,47,56,62,71,72,80,84,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,119,120,124,125,126,128,129,],[21,21,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,21,-47,-3,21,-20,-21,-22,-31,-32,-33,-34,-29,-27,-28,-30,-14,-23,-67,-65,-24,21,21,-48,21,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-41,-42,-15,-17,-19,-68,21,-18,-49,-16,-69,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,16,20,21,23,24,25,28,29,30,31,33,34,35,36,37,38,40,41,42,47,50,51,52,53,54,55,56,59,62,63,64,65,66,67,68,69,70,71,72,80,81,84,85,86,87,88,89,90,91,92,94,96,97,98,99,100,101,102,103,104,105,107,109,112,113,114,116,117,119,120,124,125,126,128,129,],[16,16,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,16,26,-47,16,16,-3,16,16,16,-20,-21,-22,-31,-32,-33,-34,16,16,-29,-27,-28,-30,16,16,-43,-44,-45,-46,-14,16,-23,16,16,16,16,16,16,16,16,-67,-65,-24,16,16,16,-50,-51,-52,-53,-54,-55,16,-48,16,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-41,-42,-15,-17,16,-19,-68,16,-18,-49,-16,-69,]),'}':([3,4,5,6,7,8,9,10,11,12,23,24,29,30,31,56,62,80,112,113,114,116,119,128,],[-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,56,-20,-21,-22,-14,-23,-24,-41,-42,-15,-17,-19,-16,]),'ELSE':([4,5,6,7,8,9,10,11,12,29,30,31,56,62,80,112,113,114,116,119,128,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-20,-21,-22,-14,-23,-24,-41,-42,124,-17,-19,-16,]),'(':([14,17,20,21,25,28,37,38,39,44,45,46,50,51,52,53,54,55,59,63,64,65,66,67,68,69,70,81,85,86,87,88,89,90,91,117,],[25,28,38,38,38,38,38,38,74,-70,-71,-72,38,38,-43,-44,-45,-46,38,38,38,38,38,38,38,38,38,38,38,-50,-51,-52,-53,-54,-55,38,]),'=':([16,22,26,94,126,],[-47,50,59,-48,-49,]),'ADDASSIGN':([16,22,94,126,],[-47,52,-48,-49,]),'SUBASSIGN':([16,22,94,126,],[-47,53,-48,-49,]),'MULASSIGN':([16,22,94,126,],[-47,54,-48,-49,]),'DIVASSIGN':([16,22,94,126,],[-47,55,-48,-49,]),';':([16,18,19,20,32,33,34,35,36,40,41,42,47,48,49,71,72,82,83,94,97,98,99,100,101,102,103,104,105,107,109,111,120,126,129,],[-47,29,30,31,62,-31,-32,-33,-34,-29,-27,-28,-30,80,-26,-67,-65,112,113,-48,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-25,-68,-49,-69,]),'+':([16,32,33,34,35,36,40,41,42,47,49,58,71,72,73,82,83,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,120,125,126,129,],[-47,63,-31,-32,-33,-34,-29,-27,-28,-30,63,63,-67,-65,63,63,63,63,-48,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,63,63,-68,63,-49,-69,]),'-':([16,20,21,25,28,32,33,34,35,36,37,38,40,41,42,47,49,50,51,52,53,54,55,58,59,63,64,65,66,67,68,69,70,71,72,73,81,82,83,85,86,87,88,89,90,91,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,117,120,125,126,129,],[-47,37,37,37,37,64,-31,-32,-33,-34,37,37,-29,-27,-28,-30,64,37,37,-43,-44,-45,-46,64,37,37,37,37,37,37,37,37,37,-67,-65,64,37,64,64,37,-50,-51,-52,-53,-54,-55,64,-48,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,64,64,37,-68,64,-49,-69,]),'*':([16,32,33,34,35,36,40,41,42,47,49,58,71,72,73,82,83,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,120,125,126,129,],[-47,65,-31,-32,-33,-34,-29,-27,-28,-30,65,65,-67,-65,65,65,65,65,-48,65,65,-59,-60,65,65,-63,-64,-66,-37,-40,65,65,-68,65,-49,-69,]),'/':([16,32,33,34,35,36,40,41,42,47,49,58,71,72,73,82,83,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,120,125,126,129,],[-47,66,-31,-32,-33,-34,-29,-27,-28,-30,66,66,-67,-65,66,66,66,66,-48,66,66,-59,-60,66,66,-63,-64,-66,-37,-40,66,66,-68,66,-49,-69,]),'DOTADD':([16,32,33,34,35,36,40,41,42,47,49,58,71,72,73,82,83,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,120,125,126,129,],[-47,67,-31,-32,-33,-34,-29,-27,-28,-30,67,67,-67,-65,67,67,67,67,-48,67,67,-59,-60,-61,-62,-63,-64,-66,-37,-40,67,67,-68,67,-49,-69,]),'DOTSUB':([16,32,33,34,35,36,40,41,42,47,49,58,71,72,73,82,83,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,120,125,126,129,],[-47,68,-31,-32,-33,-34,-29,-27,-28,-30,68,68,-67,-65,68,68,68,68,-48,68,68,-59,-60,-61,-62,-63,-64,-66,-37,-40,68,68,-68,68,-49,-69,]),'DOTMUL':([16,32,33,34,35,36,40,41,42,47,49,58,71,72,73,82,83,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,120,125,126,129,],[-47,69,-31,-32,-33,-34,-29,-27,-28,-30,69,69,-67,-65,69,69,69,69,-48,69,69,69,69,69,69,-63,-64,-66,-37,-40,69,69,-68,69,-49,-69,]),'DOTDIV':([16,32,33,34,35,36,40,41,42,47,49,58,71,72,73,82,83,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,120,125,126,129,],[-47,70,-31,-32,-33,-34,-29,-27,-28,-30,70,70,-67,-65,70,70,70,70,-48,70,70,70,70,70,70,-63,-64,-66,-37,-40,70,70,-68,70,-49,-69,]),"'":([16,32,33,34,35,36,40,41,42,47,49,58,71,72,73,82,83,93,94,97,98,99,100,101,102,103,104,105,107,109,111,115,120,125,126,129,],[-47,71,-31,-32,-33,-34,-29,-27,-28,-30,71,71,-67,-65,71,71,71,71,-48,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,71,71,-68,71,-49,-69,]),',':([16,33,34,35,36,40,41,42,47,48,49,60,71,72,76,77,78,79,94,97,98,99,100,101,102,103,104,105,106,107,109,111,120,122,123,126,129,],[-47,-31,-32,-33,-34,-29,-27,-28,-30,81,-26,95,-67,-65,108,110,-36,-39,-48,-57,-58,-59,-60,-61,-62,-63,-64,-66,121,-37,-40,-25,-68,-35,-38,-49,-69,]),'<':([16,33,34,35,36,40,41,42,47,58,71,72,94,97,98,99,100,101,102,103,104,105,107,109,120,126,129,],[-47,-31,-32,-33,-34,-29,-27,-28,-30,86,-67,-65,-48,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-68,-49,-69,]),'>':([16,33,34,35,36,40,41,42,47,58,71,72,94,97,98,99,100,101,102,103,104,105,107,109,120,126,129,],[-47,-31,-32,-33,-34,-29,-27,-28,-30,87,-67,-65,-48,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-68,-49,-69,]),'EQUAL':([16,33,34,35,36,40,41,42,47,58,71,72,94,97,98,99,100,101,102,103,104,105,107,109,120,126,129,],[-47,-31,-32,-33,-34,-29,-27,-28,-30,88,-67,-65,-48,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-68,-49,-69,]),'NOTEQUAL':([16,33,34,35,36,40,41,42,47,58,71,72,94,97,98,99,100,101,102,103,104,105,107,109,120,126,129,],[-47,-31,-32,-33,-34,-29,-27,-28,-30,89,-67,-65,-48,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-68,-49,-69,]),'LESSEQUAL':([16,33,34,35,36,40,41,42,47,58,71,72,94,97,98,99,100,101,102,103,104,105,107,109,120,126,129,],[-47,-31,-32,-33,-34,-29,-27,-28,-30,90,-67,-65,-48,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-68,-49,-69,]),'GREATEREQUAL':([16,33,34,35,36,40,41,42,47,58,71,72,94,97,98,99,100,101,102,103,104,105,107,109,120,126,129,],[-47,-31,-32,-33,-34,-29,-27,-28,-30,91,-67,-65,-48,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-68,-49,-69,]),')':([16,33,34,35,36,40,41,42,47,57,61,71,72,73,94,97,98,99,100,101,102,103,104,105,106,107,109,115,120,126,127,129,],[-47,-31,-32,-33,-34,-29,-27,-28,-30,84,96,-67,-65,105,-48,-57,-58,-59,-60,-61,-62,-63,-64,-66,120,-37,-40,-56,-68,-49,129,-69,]),':':([16,33,34,35,36,40,41,42,47,71,72,93,94,97,98,99,100,101,102,103,104,105,107,109,120,126,129,],[-47,-31,-32,-33,-34,-29,-27,-28,-30,-67,-65,117,-48,-57,-58,-59,-60,-61,-62,-63,-64,-66,-37,-40,-68,-49,-69,]),'[':([16,20,21,25,28,37,38,43,50,51,52,53,54,55,59,63,64,65,66,67,68,69,70,81,85,86,87,88,89,90,91,110,117,],[27,43,43,43,43,43,43,75,43,43,-43,-44,-45,-46,43,43,43,43,43,43,43,43,43,43,43,-50,-51,-52,-53,-54,-55,75,43,]),'STRING':([20,21,25,28,37,38,50,51,52,53,54,55,59,63,64,65,66,67,68,69,70,81,85,86,87,88,89,90,91,117,],[41,41,41,41,41,41,41,41,-43,-44,-45,-46,41,41,41,41,41,41,41,41,41,41,41,-50,-51,-52,-53,-54,-55,41,]),'EYE':([20,21,25,28,37,38,50,51,52,53,54,55,59,63,64,65,66,67,68,69,70,81,85,86,87,88,89,90,91,117,],[44,44,44,44,44,44,44,44,-43,-44,-45,-46,44,44,44,44,44,44,44,44,44,44,44,-50,-51,-52,-53,-54,-55,44,]),'ONES':([20,21,25,28,37,38,50,51,52,53,54,55,59,63,64,65,66,67,68,69,70,81,85,86,87,88,89,90,91,117,],[45,45,45,45,45,45,45,45,-43,-44,-45,-46,45,45,45,45,45,45,45,45,45,45,45,-50,-51,-52,-53,-54,-55,45,]),'ZEROS':([20,21,25,28,37,38,50,51,52,53,54,55,59,63,64,65,66,67,68,69,70,81,85,86,87,88,89,90,91,117,],[46,46,46,46,46,46,46,46,-43,-44,-45,-46,46,46,46,46,46,46,46,46,46,46,46,-50,-51,-52,-53,-54,-55,46,]),'INTEGER':([20,21,25,27,28,37,38,43,50,51,52,53,54,55,59,63,64,65,66,67,68,69,70,74,75,81,85,86,87,88,89,90,91,95,108,117,121,],[40,40,40,60,40,40,40,40,40,40,-43,-44,-45,-46,40,40,40,40,40,40,40,40,40,106,40,40,40,-50,-51,-52,-53,-54,-55,118,40,40,127,]),'FLOAT':([20,21,25,28,37,38,43,50,51,52,53,54,55,59,63,64,65,66,67,68,69,70,75,81,85,86,87,88,89,90,91,108,117,],[47,47,47,47,47,47,47,47,47,-43,-44,-45,-46,47,47,47,47,47,47,47,47,47,47,47,47,-50,-51,-52,-53,-54,-55,47,47,]),']':([40,47,60,76,77,78,79,107,118,122,123,],[-29,-30,94,107,109,-36,-39,-37,126,-35,-38,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,13,],[2,24,]),'instruction':([0,2,13,24,84,92,96,124,],[3,23,3,23,114,116,119,128,]),'block':([0,2,13,24,84,92,96,124,],[4,4,4,4,4,4,4,4,]),'if':([0,2,13,24,84,92,96,124,],[5,5,5,5,5,5,5,5,]),'for':([0,2,13,24,84,92,96,124,],[6,6,6,6,6,6,6,6,]),'while':([0,2,13,24,84,92,96,124,],[7,7,7,7,7,7,7,7,]),'break':([0,2,13,24,84,92,96,124,],[8,8,8,8,8,8,8,8,]),'continue':([0,2,13,24,84,92,96,124,],[9,9,9,9,9,9,9,9,]),'return':([0,2,13,24,84,92,96,124,],[10,10,10,10,10,10,10,10,]),'print':([0,2,13,24,84,92,96,124,],[11,11,11,11,11,11,11,11,]),'assign':([0,2,13,24,84,92,96,124,],[12,12,12,12,12,12,12,12,]),'variable':([0,2,13,20,21,24,25,28,37,38,50,51,59,63,64,65,66,67,68,69,70,81,84,85,92,96,117,124,],[22,22,22,36,36,22,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,22,36,22,22,36,22,]),'expression':([20,21,25,28,37,38,50,51,59,63,64,65,66,67,68,69,70,81,85,117,],[32,49,58,58,72,73,82,83,93,97,98,99,100,101,102,103,104,111,115,125,]),'type':([20,21,25,28,37,38,50,51,59,63,64,65,66,67,68,69,70,81,85,117,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'vector':([20,21,25,28,37,38,43,50,51,59,63,64,65,66,67,68,69,70,81,85,110,117,],[34,34,34,34,34,34,79,34,34,34,34,34,34,34,34,34,34,34,34,34,123,34,]),'matrix':([20,21,25,28,37,38,50,51,59,63,64,65,66,67,68,69,70,81,85,117,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'matrix_func':([20,21,25,28,37,38,50,51,59,63,64,65,66,67,68,69,70,81,85,117,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'number':([20,21,25,28,37,38,43,50,51,59,63,64,65,66,67,68,69,70,75,81,85,108,117,],[42,42,42,42,42,42,78,42,42,42,42,42,42,42,42,42,42,42,78,42,42,122,42,]),'expressions':([21,],[48,]),'calculation_assign':([22,],[51,]),'condition':([25,28,],[57,61,]),'numbers':([43,75,],[76,76,]),'vectors':([43,],[77,]),'comparator':([58,],[85,]),'range':([59,],[92,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','Mparser.py',28),
  ('program -> <empty>','program',0,'p_program','Mparser.py',29),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Mparser.py',32),
  ('instructions -> instruction','instructions',1,'p_instructions','Mparser.py',33),
  ('instruction -> block','instruction',1,'p_instruction','Mparser.py',38),
  ('instruction -> if','instruction',1,'p_instruction','Mparser.py',39),
  ('instruction -> for','instruction',1,'p_instruction','Mparser.py',40),
  ('instruction -> while','instruction',1,'p_instruction','Mparser.py',41),
  ('instruction -> break','instruction',1,'p_instruction','Mparser.py',42),
  ('instruction -> continue','instruction',1,'p_instruction','Mparser.py',43),
  ('instruction -> return','instruction',1,'p_instruction','Mparser.py',44),
  ('instruction -> print','instruction',1,'p_instruction','Mparser.py',45),
  ('instruction -> assign','instruction',1,'p_instruction','Mparser.py',46),
  ('block -> { instructions }','block',3,'p_block','Mparser.py',50),
  ('if -> IF ( condition ) instruction','if',5,'p_if','Mparser.py',54),
  ('if -> IF ( condition ) instruction ELSE instruction','if',7,'p_if','Mparser.py',55),
  ('for -> FOR ID = range instruction','for',5,'p_for','Mparser.py',59),
  ('range -> expression : expression','range',3,'p_range','Mparser.py',63),
  ('while -> WHILE ( condition ) instruction','while',5,'p_while','Mparser.py',67),
  ('break -> BREAK ;','break',2,'p_break','Mparser.py',71),
  ('continue -> CONTINUE ;','continue',2,'p_continue','Mparser.py',75),
  ('return -> RETURN ;','return',2,'p_return','Mparser.py',79),
  ('return -> RETURN expression ;','return',3,'p_return','Mparser.py',80),
  ('print -> PRINT expressions ;','print',3,'p_print','Mparser.py',84),
  ('expressions -> expressions , expression','expressions',3,'p_expressions','Mparser.py',88),
  ('expressions -> expression','expressions',1,'p_expressions','Mparser.py',89),
  ('type -> STRING','type',1,'p_type','Mparser.py',91),
  ('type -> number','type',1,'p_type','Mparser.py',92),
  ('number -> INTEGER','number',1,'p_number','Mparser.py',95),
  ('number -> FLOAT','number',1,'p_number','Mparser.py',96),
  ('expression -> type','expression',1,'p_expression','Mparser.py',100),
  ('expression -> vector','expression',1,'p_expression','Mparser.py',101),
  ('expression -> matrix','expression',1,'p_expression','Mparser.py',102),
  ('expression -> variable','expression',1,'p_expression','Mparser.py',103),
  ('numbers -> numbers , number','numbers',3,'p_numbers','Mparser.py',106),
  ('numbers -> number','numbers',1,'p_numbers','Mparser.py',107),
  ('vector -> [ numbers ]','vector',3,'p_vector','Mparser.py',111),
  ('vectors -> vectors , vector','vectors',3,'p_vectors','Mparser.py',115),
  ('vectors -> vector','vectors',1,'p_vectors','Mparser.py',116),
  ('matrix -> [ vectors ]','matrix',3,'p_matrix','Mparser.py',120),
  ('assign -> variable = expression ;','assign',4,'p_assign','Mparser.py',126),
  ('assign -> variable calculation_assign expression ;','assign',4,'p_assign','Mparser.py',127),
  ('calculation_assign -> ADDASSIGN','calculation_assign',1,'p_calculation_assign','Mparser.py',131),
  ('calculation_assign -> SUBASSIGN','calculation_assign',1,'p_calculation_assign','Mparser.py',132),
  ('calculation_assign -> MULASSIGN','calculation_assign',1,'p_calculation_assign','Mparser.py',133),
  ('calculation_assign -> DIVASSIGN','calculation_assign',1,'p_calculation_assign','Mparser.py',134),
  ('variable -> ID','variable',1,'p_variable','Mparser.py',138),
  ('variable -> ID [ INTEGER ]','variable',4,'p_variable','Mparser.py',139),
  ('variable -> ID [ INTEGER , INTEGER ]','variable',6,'p_variable','Mparser.py',140),
  ('comparator -> <','comparator',1,'p_comparator','Mparser.py',143),
  ('comparator -> >','comparator',1,'p_comparator','Mparser.py',144),
  ('comparator -> EQUAL','comparator',1,'p_comparator','Mparser.py',145),
  ('comparator -> NOTEQUAL','comparator',1,'p_comparator','Mparser.py',146),
  ('comparator -> LESSEQUAL','comparator',1,'p_comparator','Mparser.py',147),
  ('comparator -> GREATEREQUAL','comparator',1,'p_comparator','Mparser.py',148),
  ('condition -> expression comparator expression','condition',3,'p_condition','Mparser.py',152),
  ('expression -> expression + expression','expression',3,'p_expression_binop','Mparser.py',156),
  ('expression -> expression - expression','expression',3,'p_expression_binop','Mparser.py',157),
  ('expression -> expression * expression','expression',3,'p_expression_binop','Mparser.py',158),
  ('expression -> expression / expression','expression',3,'p_expression_binop','Mparser.py',159),
  ('expression -> expression DOTADD expression','expression',3,'p_expression_matrixop','Mparser.py',163),
  ('expression -> expression DOTSUB expression','expression',3,'p_expression_matrixop','Mparser.py',164),
  ('expression -> expression DOTMUL expression','expression',3,'p_expression_matrixop','Mparser.py',165),
  ('expression -> expression DOTDIV expression','expression',3,'p_expression_matrixop','Mparser.py',166),
  ('expression -> - expression','expression',2,'p_expression_uminus','Mparser.py',170),
  ('expression -> ( expression )','expression',3,'p_expression_parentheses','Mparser.py',174),
  ("expression -> expression '",'expression',2,'p_expression_transpose','Mparser.py',178),
  ('expression -> matrix_func ( INTEGER )','expression',4,'p_expression_matrix_functions','Mparser.py',182),
  ('expression -> matrix_func ( INTEGER , INTEGER )','expression',6,'p_expression_matrix_functions','Mparser.py',183),
  ('matrix_func -> EYE','matrix_func',1,'p_matrix_function','Mparser.py',187),
  ('matrix_func -> ONES','matrix_func',1,'p_matrix_function','Mparser.py',188),
  ('matrix_func -> ZEROS','matrix_func',1,'p_matrix_function','Mparser.py',189),
]
