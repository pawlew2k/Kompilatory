Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions
Rule 2     program -> <empty>
Rule 3     instructions -> instructions instruction
Rule 4     instructions -> instruction
Rule 5     instruction -> block
Rule 6     instruction -> if
Rule 7     instruction -> for
Rule 8     instruction -> while
Rule 9     instruction -> break ;
Rule 10    instruction -> continue ;
Rule 11    instruction -> return ;
Rule 12    instruction -> print ;
Rule 13    instruction -> assign ;
Rule 14    block -> { instructions }
Rule 15    if -> IF ( condition ) instruction
Rule 16    if -> IF ( condition ) instruction ELSE instruction
Rule 17    for -> FOR ID = range instruction
Rule 18    range -> expression : expression
Rule 19    while -> WHILE ( condition ) instruction
Rule 20    break -> BREAK
Rule 21    continue -> CONTINUE
Rule 22    return -> RETURN
Rule 23    return -> RETURN expression
Rule 24    print -> PRINT expressions
Rule 25    expression -> singleton
Rule 26    expression -> vector
Rule 27    expression -> matrix
Rule 28    expression -> variable
Rule 29    expressions -> expressions , expression
Rule 30    expressions -> expression
Rule 31    singleton -> STRING
Rule 32    singleton -> INTEGER
Rule 33    singleton -> FLOAT
Rule 34    vector -> [ expressions ]
Rule 35    vector -> [ ]
Rule 36    vectors -> vectors , vector
Rule 37    vectors -> vector
Rule 38    matrix -> [ vectors ]
Rule 39    assign -> variable = expression
Rule 40    assign -> variable calculation_assign expression
Rule 41    calculation_assign -> ADDASSIGN
Rule 42    calculation_assign -> SUBASSIGN
Rule 43    calculation_assign -> MULASSIGN
Rule 44    calculation_assign -> DIVASSIGN
Rule 45    variable -> ID
Rule 46    variable -> ID [ INTEGER ]
Rule 47    variable -> ID [ INTEGER , INTEGER ]
Rule 48    comparator -> <
Rule 49    comparator -> >
Rule 50    comparator -> EQUAL
Rule 51    comparator -> NOTEQUAL
Rule 52    comparator -> LESSEQUAL
Rule 53    comparator -> GREATEREQUAL
Rule 54    condition -> expression comparator expression
Rule 55    expression -> expression + expression
Rule 56    expression -> expression - expression
Rule 57    expression -> expression * expression
Rule 58    expression -> expression / expression
Rule 59    expression -> expression DOTADD expression
Rule 60    expression -> expression DOTSUB expression
Rule 61    expression -> expression DOTMUL expression
Rule 62    expression -> expression DOTDIV expression
Rule 63    expression -> - expression
Rule 64    expression -> ( expression )
Rule 65    expression -> expression '
Rule 66    expression -> matrix_func ( INTEGER )
Rule 67    expression -> matrix_func ( INTEGER , INTEGER )
Rule 68    matrix_func -> EYE
Rule 69    matrix_func -> ONES
Rule 70    matrix_func -> ZEROS

Terminals, with rules where they appear

'                    : 65
(                    : 15 16 19 64 66 67
)                    : 15 16 19 64 66 67
*                    : 57
+                    : 55
,                    : 29 36 47 67
-                    : 56 63
/                    : 58
:                    : 18
;                    : 9 10 11 12 13
<                    : 48
=                    : 17 39
>                    : 49
ADDASSIGN            : 41
BREAK                : 20
CONTINUE             : 21
DIVASSIGN            : 44
DOTADD               : 59
DOTDIV               : 62
DOTMUL               : 61
DOTSUB               : 60
ELSE                 : 16
EQUAL                : 50
EYE                  : 68
FLOAT                : 33
FOR                  : 17
GREATEREQUAL         : 53
ID                   : 17 45 46 47
IF                   : 15 16
INTEGER              : 32 46 47 47 66 67 67
LESSEQUAL            : 52
MULASSIGN            : 43
NOTEQUAL             : 51
ONES                 : 69
PRINT                : 24
RETURN               : 22 23
STRING               : 31
SUBASSIGN            : 42
WHILE                : 19
ZEROS                : 70
[                    : 34 35 38 46 47
]                    : 34 35 38 46 47
error                : 
{                    : 14
}                    : 14

Nonterminals, with rules where they appear

assign               : 13
block                : 5
break                : 9
calculation_assign   : 40
comparator           : 54
condition            : 15 16 19
continue             : 10
expression           : 18 18 23 29 30 39 40 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 64 65
expressions          : 24 29 34
for                  : 7
if                   : 6
instruction          : 3 4 15 16 16 17 19
instructions         : 1 3 14
matrix               : 27
matrix_func          : 66 67
print                : 12
program              : 0
range                : 17
return               : 11
singleton            : 25
variable             : 28 39 40
vector               : 26 36 37
vectors              : 36 38
while                : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions
    (2) program -> .
    (3) instructions -> . instructions instruction
    (4) instructions -> . instruction
    (5) instruction -> . block
    (6) instruction -> . if
    (7) instruction -> . for
    (8) instruction -> . while
    (9) instruction -> . break ;
    (10) instruction -> . continue ;
    (11) instruction -> . return ;
    (12) instruction -> . print ;
    (13) instruction -> . assign ;
    (14) block -> . { instructions }
    (15) if -> . IF ( condition ) instruction
    (16) if -> . IF ( condition ) instruction ELSE instruction
    (17) for -> . FOR ID = range instruction
    (19) while -> . WHILE ( condition ) instruction
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) print -> . PRINT expressions
    (39) assign -> . variable = expression
    (40) assign -> . variable calculation_assign expression
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]

    $end            reduce using rule 2 (program -> .)
    {               shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    ID              shift and go to state 16

    program                        shift and go to state 1
    instructions                   shift and go to state 2
    instruction                    shift and go to state 3
    block                          shift and go to state 4
    if                             shift and go to state 5
    for                            shift and go to state 6
    while                          shift and go to state 7
    break                          shift and go to state 8
    continue                       shift and go to state 9
    return                         shift and go to state 10
    print                          shift and go to state 11
    assign                         shift and go to state 12
    variable                       shift and go to state 22

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions .
    (3) instructions -> instructions . instruction
    (5) instruction -> . block
    (6) instruction -> . if
    (7) instruction -> . for
    (8) instruction -> . while
    (9) instruction -> . break ;
    (10) instruction -> . continue ;
    (11) instruction -> . return ;
    (12) instruction -> . print ;
    (13) instruction -> . assign ;
    (14) block -> . { instructions }
    (15) if -> . IF ( condition ) instruction
    (16) if -> . IF ( condition ) instruction ELSE instruction
    (17) for -> . FOR ID = range instruction
    (19) while -> . WHILE ( condition ) instruction
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) print -> . PRINT expressions
    (39) assign -> . variable = expression
    (40) assign -> . variable calculation_assign expression
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]

    $end            reduce using rule 1 (program -> instructions .)
    {               shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    ID              shift and go to state 16

    instruction                    shift and go to state 23
    block                          shift and go to state 4
    if                             shift and go to state 5
    for                            shift and go to state 6
    while                          shift and go to state 7
    break                          shift and go to state 8
    continue                       shift and go to state 9
    return                         shift and go to state 10
    print                          shift and go to state 11
    assign                         shift and go to state 12
    variable                       shift and go to state 22

state 3

    (4) instructions -> instruction .

    {               reduce using rule 4 (instructions -> instruction .)
    IF              reduce using rule 4 (instructions -> instruction .)
    FOR             reduce using rule 4 (instructions -> instruction .)
    WHILE           reduce using rule 4 (instructions -> instruction .)
    BREAK           reduce using rule 4 (instructions -> instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instruction .)
    RETURN          reduce using rule 4 (instructions -> instruction .)
    PRINT           reduce using rule 4 (instructions -> instruction .)
    ID              reduce using rule 4 (instructions -> instruction .)
    $end            reduce using rule 4 (instructions -> instruction .)
    }               reduce using rule 4 (instructions -> instruction .)


state 4

    (5) instruction -> block .

    {               reduce using rule 5 (instruction -> block .)
    IF              reduce using rule 5 (instruction -> block .)
    FOR             reduce using rule 5 (instruction -> block .)
    WHILE           reduce using rule 5 (instruction -> block .)
    BREAK           reduce using rule 5 (instruction -> block .)
    CONTINUE        reduce using rule 5 (instruction -> block .)
    RETURN          reduce using rule 5 (instruction -> block .)
    PRINT           reduce using rule 5 (instruction -> block .)
    ID              reduce using rule 5 (instruction -> block .)
    $end            reduce using rule 5 (instruction -> block .)
    }               reduce using rule 5 (instruction -> block .)
    ELSE            reduce using rule 5 (instruction -> block .)


state 5

    (6) instruction -> if .

    {               reduce using rule 6 (instruction -> if .)
    IF              reduce using rule 6 (instruction -> if .)
    FOR             reduce using rule 6 (instruction -> if .)
    WHILE           reduce using rule 6 (instruction -> if .)
    BREAK           reduce using rule 6 (instruction -> if .)
    CONTINUE        reduce using rule 6 (instruction -> if .)
    RETURN          reduce using rule 6 (instruction -> if .)
    PRINT           reduce using rule 6 (instruction -> if .)
    ID              reduce using rule 6 (instruction -> if .)
    $end            reduce using rule 6 (instruction -> if .)
    }               reduce using rule 6 (instruction -> if .)
    ELSE            reduce using rule 6 (instruction -> if .)


state 6

    (7) instruction -> for .

    {               reduce using rule 7 (instruction -> for .)
    IF              reduce using rule 7 (instruction -> for .)
    FOR             reduce using rule 7 (instruction -> for .)
    WHILE           reduce using rule 7 (instruction -> for .)
    BREAK           reduce using rule 7 (instruction -> for .)
    CONTINUE        reduce using rule 7 (instruction -> for .)
    RETURN          reduce using rule 7 (instruction -> for .)
    PRINT           reduce using rule 7 (instruction -> for .)
    ID              reduce using rule 7 (instruction -> for .)
    $end            reduce using rule 7 (instruction -> for .)
    }               reduce using rule 7 (instruction -> for .)
    ELSE            reduce using rule 7 (instruction -> for .)


state 7

    (8) instruction -> while .

    {               reduce using rule 8 (instruction -> while .)
    IF              reduce using rule 8 (instruction -> while .)
    FOR             reduce using rule 8 (instruction -> while .)
    WHILE           reduce using rule 8 (instruction -> while .)
    BREAK           reduce using rule 8 (instruction -> while .)
    CONTINUE        reduce using rule 8 (instruction -> while .)
    RETURN          reduce using rule 8 (instruction -> while .)
    PRINT           reduce using rule 8 (instruction -> while .)
    ID              reduce using rule 8 (instruction -> while .)
    $end            reduce using rule 8 (instruction -> while .)
    }               reduce using rule 8 (instruction -> while .)
    ELSE            reduce using rule 8 (instruction -> while .)


state 8

    (9) instruction -> break . ;

    ;               shift and go to state 24


state 9

    (10) instruction -> continue . ;

    ;               shift and go to state 25


state 10

    (11) instruction -> return . ;

    ;               shift and go to state 26


state 11

    (12) instruction -> print . ;

    ;               shift and go to state 27


state 12

    (13) instruction -> assign . ;

    ;               shift and go to state 28


state 13

    (14) block -> { . instructions }
    (3) instructions -> . instructions instruction
    (4) instructions -> . instruction
    (5) instruction -> . block
    (6) instruction -> . if
    (7) instruction -> . for
    (8) instruction -> . while
    (9) instruction -> . break ;
    (10) instruction -> . continue ;
    (11) instruction -> . return ;
    (12) instruction -> . print ;
    (13) instruction -> . assign ;
    (14) block -> . { instructions }
    (15) if -> . IF ( condition ) instruction
    (16) if -> . IF ( condition ) instruction ELSE instruction
    (17) for -> . FOR ID = range instruction
    (19) while -> . WHILE ( condition ) instruction
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) print -> . PRINT expressions
    (39) assign -> . variable = expression
    (40) assign -> . variable calculation_assign expression
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]

    {               shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    ID              shift and go to state 16

    instructions                   shift and go to state 29
    instruction                    shift and go to state 3
    block                          shift and go to state 4
    if                             shift and go to state 5
    for                            shift and go to state 6
    while                          shift and go to state 7
    break                          shift and go to state 8
    continue                       shift and go to state 9
    return                         shift and go to state 10
    print                          shift and go to state 11
    assign                         shift and go to state 12
    variable                       shift and go to state 22

state 14

    (15) if -> IF . ( condition ) instruction
    (16) if -> IF . ( condition ) instruction ELSE instruction

    (               shift and go to state 30


state 15

    (17) for -> FOR . ID = range instruction

    ID              shift and go to state 31


state 16

    (45) variable -> ID .
    (46) variable -> ID . [ INTEGER ]
    (47) variable -> ID . [ INTEGER , INTEGER ]

    =               reduce using rule 45 (variable -> ID .)
    ADDASSIGN       reduce using rule 45 (variable -> ID .)
    SUBASSIGN       reduce using rule 45 (variable -> ID .)
    MULASSIGN       reduce using rule 45 (variable -> ID .)
    DIVASSIGN       reduce using rule 45 (variable -> ID .)
    +               reduce using rule 45 (variable -> ID .)
    -               reduce using rule 45 (variable -> ID .)
    *               reduce using rule 45 (variable -> ID .)
    /               reduce using rule 45 (variable -> ID .)
    DOTADD          reduce using rule 45 (variable -> ID .)
    DOTSUB          reduce using rule 45 (variable -> ID .)
    DOTMUL          reduce using rule 45 (variable -> ID .)
    DOTDIV          reduce using rule 45 (variable -> ID .)
    '               reduce using rule 45 (variable -> ID .)
    ;               reduce using rule 45 (variable -> ID .)
    ,               reduce using rule 45 (variable -> ID .)
    <               reduce using rule 45 (variable -> ID .)
    >               reduce using rule 45 (variable -> ID .)
    EQUAL           reduce using rule 45 (variable -> ID .)
    NOTEQUAL        reduce using rule 45 (variable -> ID .)
    LESSEQUAL       reduce using rule 45 (variable -> ID .)
    GREATEREQUAL    reduce using rule 45 (variable -> ID .)
    )               reduce using rule 45 (variable -> ID .)
    ]               reduce using rule 45 (variable -> ID .)
    :               reduce using rule 45 (variable -> ID .)
    {               reduce using rule 45 (variable -> ID .)
    IF              reduce using rule 45 (variable -> ID .)
    FOR             reduce using rule 45 (variable -> ID .)
    WHILE           reduce using rule 45 (variable -> ID .)
    BREAK           reduce using rule 45 (variable -> ID .)
    CONTINUE        reduce using rule 45 (variable -> ID .)
    RETURN          reduce using rule 45 (variable -> ID .)
    PRINT           reduce using rule 45 (variable -> ID .)
    ID              reduce using rule 45 (variable -> ID .)
    [               shift and go to state 32


state 17

    (19) while -> WHILE . ( condition ) instruction

    (               shift and go to state 33


state 18

    (20) break -> BREAK .

    ;               reduce using rule 20 (break -> BREAK .)


state 19

    (21) continue -> CONTINUE .

    ;               reduce using rule 21 (continue -> CONTINUE .)


state 20

    (22) return -> RETURN .
    (23) return -> RETURN . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    ;               reduce using rule 22 (return -> RETURN .)
    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 34
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 21

    (24) print -> PRINT . expressions
    (29) expressions -> . expressions , expression
    (30) expressions -> . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expressions                    shift and go to state 49
    expression                     shift and go to state 50
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 22

    (39) assign -> variable . = expression
    (40) assign -> variable . calculation_assign expression
    (41) calculation_assign -> . ADDASSIGN
    (42) calculation_assign -> . SUBASSIGN
    (43) calculation_assign -> . MULASSIGN
    (44) calculation_assign -> . DIVASSIGN

    =               shift and go to state 51
    ADDASSIGN       shift and go to state 53
    SUBASSIGN       shift and go to state 54
    MULASSIGN       shift and go to state 55
    DIVASSIGN       shift and go to state 56

    calculation_assign             shift and go to state 52

state 23

    (3) instructions -> instructions instruction .

    {               reduce using rule 3 (instructions -> instructions instruction .)
    IF              reduce using rule 3 (instructions -> instructions instruction .)
    FOR             reduce using rule 3 (instructions -> instructions instruction .)
    WHILE           reduce using rule 3 (instructions -> instructions instruction .)
    BREAK           reduce using rule 3 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 3 (instructions -> instructions instruction .)
    RETURN          reduce using rule 3 (instructions -> instructions instruction .)
    PRINT           reduce using rule 3 (instructions -> instructions instruction .)
    ID              reduce using rule 3 (instructions -> instructions instruction .)
    $end            reduce using rule 3 (instructions -> instructions instruction .)
    }               reduce using rule 3 (instructions -> instructions instruction .)


state 24

    (9) instruction -> break ; .

    {               reduce using rule 9 (instruction -> break ; .)
    IF              reduce using rule 9 (instruction -> break ; .)
    FOR             reduce using rule 9 (instruction -> break ; .)
    WHILE           reduce using rule 9 (instruction -> break ; .)
    BREAK           reduce using rule 9 (instruction -> break ; .)
    CONTINUE        reduce using rule 9 (instruction -> break ; .)
    RETURN          reduce using rule 9 (instruction -> break ; .)
    PRINT           reduce using rule 9 (instruction -> break ; .)
    ID              reduce using rule 9 (instruction -> break ; .)
    $end            reduce using rule 9 (instruction -> break ; .)
    }               reduce using rule 9 (instruction -> break ; .)
    ELSE            reduce using rule 9 (instruction -> break ; .)


state 25

    (10) instruction -> continue ; .

    {               reduce using rule 10 (instruction -> continue ; .)
    IF              reduce using rule 10 (instruction -> continue ; .)
    FOR             reduce using rule 10 (instruction -> continue ; .)
    WHILE           reduce using rule 10 (instruction -> continue ; .)
    BREAK           reduce using rule 10 (instruction -> continue ; .)
    CONTINUE        reduce using rule 10 (instruction -> continue ; .)
    RETURN          reduce using rule 10 (instruction -> continue ; .)
    PRINT           reduce using rule 10 (instruction -> continue ; .)
    ID              reduce using rule 10 (instruction -> continue ; .)
    $end            reduce using rule 10 (instruction -> continue ; .)
    }               reduce using rule 10 (instruction -> continue ; .)
    ELSE            reduce using rule 10 (instruction -> continue ; .)


state 26

    (11) instruction -> return ; .

    {               reduce using rule 11 (instruction -> return ; .)
    IF              reduce using rule 11 (instruction -> return ; .)
    FOR             reduce using rule 11 (instruction -> return ; .)
    WHILE           reduce using rule 11 (instruction -> return ; .)
    BREAK           reduce using rule 11 (instruction -> return ; .)
    CONTINUE        reduce using rule 11 (instruction -> return ; .)
    RETURN          reduce using rule 11 (instruction -> return ; .)
    PRINT           reduce using rule 11 (instruction -> return ; .)
    ID              reduce using rule 11 (instruction -> return ; .)
    $end            reduce using rule 11 (instruction -> return ; .)
    }               reduce using rule 11 (instruction -> return ; .)
    ELSE            reduce using rule 11 (instruction -> return ; .)


state 27

    (12) instruction -> print ; .

    {               reduce using rule 12 (instruction -> print ; .)
    IF              reduce using rule 12 (instruction -> print ; .)
    FOR             reduce using rule 12 (instruction -> print ; .)
    WHILE           reduce using rule 12 (instruction -> print ; .)
    BREAK           reduce using rule 12 (instruction -> print ; .)
    CONTINUE        reduce using rule 12 (instruction -> print ; .)
    RETURN          reduce using rule 12 (instruction -> print ; .)
    PRINT           reduce using rule 12 (instruction -> print ; .)
    ID              reduce using rule 12 (instruction -> print ; .)
    $end            reduce using rule 12 (instruction -> print ; .)
    }               reduce using rule 12 (instruction -> print ; .)
    ELSE            reduce using rule 12 (instruction -> print ; .)


state 28

    (13) instruction -> assign ; .

    {               reduce using rule 13 (instruction -> assign ; .)
    IF              reduce using rule 13 (instruction -> assign ; .)
    FOR             reduce using rule 13 (instruction -> assign ; .)
    WHILE           reduce using rule 13 (instruction -> assign ; .)
    BREAK           reduce using rule 13 (instruction -> assign ; .)
    CONTINUE        reduce using rule 13 (instruction -> assign ; .)
    RETURN          reduce using rule 13 (instruction -> assign ; .)
    PRINT           reduce using rule 13 (instruction -> assign ; .)
    ID              reduce using rule 13 (instruction -> assign ; .)
    $end            reduce using rule 13 (instruction -> assign ; .)
    }               reduce using rule 13 (instruction -> assign ; .)
    ELSE            reduce using rule 13 (instruction -> assign ; .)


state 29

    (14) block -> { instructions . }
    (3) instructions -> instructions . instruction
    (5) instruction -> . block
    (6) instruction -> . if
    (7) instruction -> . for
    (8) instruction -> . while
    (9) instruction -> . break ;
    (10) instruction -> . continue ;
    (11) instruction -> . return ;
    (12) instruction -> . print ;
    (13) instruction -> . assign ;
    (14) block -> . { instructions }
    (15) if -> . IF ( condition ) instruction
    (16) if -> . IF ( condition ) instruction ELSE instruction
    (17) for -> . FOR ID = range instruction
    (19) while -> . WHILE ( condition ) instruction
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) print -> . PRINT expressions
    (39) assign -> . variable = expression
    (40) assign -> . variable calculation_assign expression
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]

    }               shift and go to state 57
    {               shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    ID              shift and go to state 16

    instruction                    shift and go to state 23
    block                          shift and go to state 4
    if                             shift and go to state 5
    for                            shift and go to state 6
    while                          shift and go to state 7
    break                          shift and go to state 8
    continue                       shift and go to state 9
    return                         shift and go to state 10
    print                          shift and go to state 11
    assign                         shift and go to state 12
    variable                       shift and go to state 22

state 30

    (15) if -> IF ( . condition ) instruction
    (16) if -> IF ( . condition ) instruction ELSE instruction
    (54) condition -> . expression comparator expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    condition                      shift and go to state 58
    expression                     shift and go to state 59
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 31

    (17) for -> FOR ID . = range instruction

    =               shift and go to state 60


state 32

    (46) variable -> ID [ . INTEGER ]
    (47) variable -> ID [ . INTEGER , INTEGER ]

    INTEGER         shift and go to state 61


state 33

    (19) while -> WHILE ( . condition ) instruction
    (54) condition -> . expression comparator expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    condition                      shift and go to state 62
    expression                     shift and go to state 59
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 34

    (23) return -> RETURN expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               reduce using rule 23 (return -> RETURN expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 35

    (25) expression -> singleton .

    +               reduce using rule 25 (expression -> singleton .)
    -               reduce using rule 25 (expression -> singleton .)
    *               reduce using rule 25 (expression -> singleton .)
    /               reduce using rule 25 (expression -> singleton .)
    DOTADD          reduce using rule 25 (expression -> singleton .)
    DOTSUB          reduce using rule 25 (expression -> singleton .)
    DOTMUL          reduce using rule 25 (expression -> singleton .)
    DOTDIV          reduce using rule 25 (expression -> singleton .)
    '               reduce using rule 25 (expression -> singleton .)
    ;               reduce using rule 25 (expression -> singleton .)
    ,               reduce using rule 25 (expression -> singleton .)
    <               reduce using rule 25 (expression -> singleton .)
    >               reduce using rule 25 (expression -> singleton .)
    EQUAL           reduce using rule 25 (expression -> singleton .)
    NOTEQUAL        reduce using rule 25 (expression -> singleton .)
    LESSEQUAL       reduce using rule 25 (expression -> singleton .)
    GREATEREQUAL    reduce using rule 25 (expression -> singleton .)
    )               reduce using rule 25 (expression -> singleton .)
    ]               reduce using rule 25 (expression -> singleton .)
    :               reduce using rule 25 (expression -> singleton .)
    {               reduce using rule 25 (expression -> singleton .)
    IF              reduce using rule 25 (expression -> singleton .)
    FOR             reduce using rule 25 (expression -> singleton .)
    WHILE           reduce using rule 25 (expression -> singleton .)
    BREAK           reduce using rule 25 (expression -> singleton .)
    CONTINUE        reduce using rule 25 (expression -> singleton .)
    RETURN          reduce using rule 25 (expression -> singleton .)
    PRINT           reduce using rule 25 (expression -> singleton .)
    ID              reduce using rule 25 (expression -> singleton .)


state 36

    (26) expression -> vector .

    +               reduce using rule 26 (expression -> vector .)
    -               reduce using rule 26 (expression -> vector .)
    *               reduce using rule 26 (expression -> vector .)
    /               reduce using rule 26 (expression -> vector .)
    DOTADD          reduce using rule 26 (expression -> vector .)
    DOTSUB          reduce using rule 26 (expression -> vector .)
    DOTMUL          reduce using rule 26 (expression -> vector .)
    DOTDIV          reduce using rule 26 (expression -> vector .)
    '               reduce using rule 26 (expression -> vector .)
    ;               reduce using rule 26 (expression -> vector .)
    ,               reduce using rule 26 (expression -> vector .)
    <               reduce using rule 26 (expression -> vector .)
    >               reduce using rule 26 (expression -> vector .)
    EQUAL           reduce using rule 26 (expression -> vector .)
    NOTEQUAL        reduce using rule 26 (expression -> vector .)
    LESSEQUAL       reduce using rule 26 (expression -> vector .)
    GREATEREQUAL    reduce using rule 26 (expression -> vector .)
    )               reduce using rule 26 (expression -> vector .)
    ]               reduce using rule 26 (expression -> vector .)
    :               reduce using rule 26 (expression -> vector .)
    {               reduce using rule 26 (expression -> vector .)
    IF              reduce using rule 26 (expression -> vector .)
    FOR             reduce using rule 26 (expression -> vector .)
    WHILE           reduce using rule 26 (expression -> vector .)
    BREAK           reduce using rule 26 (expression -> vector .)
    CONTINUE        reduce using rule 26 (expression -> vector .)
    RETURN          reduce using rule 26 (expression -> vector .)
    PRINT           reduce using rule 26 (expression -> vector .)
    ID              reduce using rule 26 (expression -> vector .)


state 37

    (27) expression -> matrix .

    +               reduce using rule 27 (expression -> matrix .)
    -               reduce using rule 27 (expression -> matrix .)
    *               reduce using rule 27 (expression -> matrix .)
    /               reduce using rule 27 (expression -> matrix .)
    DOTADD          reduce using rule 27 (expression -> matrix .)
    DOTSUB          reduce using rule 27 (expression -> matrix .)
    DOTMUL          reduce using rule 27 (expression -> matrix .)
    DOTDIV          reduce using rule 27 (expression -> matrix .)
    '               reduce using rule 27 (expression -> matrix .)
    ;               reduce using rule 27 (expression -> matrix .)
    ,               reduce using rule 27 (expression -> matrix .)
    <               reduce using rule 27 (expression -> matrix .)
    >               reduce using rule 27 (expression -> matrix .)
    EQUAL           reduce using rule 27 (expression -> matrix .)
    NOTEQUAL        reduce using rule 27 (expression -> matrix .)
    LESSEQUAL       reduce using rule 27 (expression -> matrix .)
    GREATEREQUAL    reduce using rule 27 (expression -> matrix .)
    )               reduce using rule 27 (expression -> matrix .)
    ]               reduce using rule 27 (expression -> matrix .)
    :               reduce using rule 27 (expression -> matrix .)
    {               reduce using rule 27 (expression -> matrix .)
    IF              reduce using rule 27 (expression -> matrix .)
    FOR             reduce using rule 27 (expression -> matrix .)
    WHILE           reduce using rule 27 (expression -> matrix .)
    BREAK           reduce using rule 27 (expression -> matrix .)
    CONTINUE        reduce using rule 27 (expression -> matrix .)
    RETURN          reduce using rule 27 (expression -> matrix .)
    PRINT           reduce using rule 27 (expression -> matrix .)
    ID              reduce using rule 27 (expression -> matrix .)


state 38

    (28) expression -> variable .

    +               reduce using rule 28 (expression -> variable .)
    -               reduce using rule 28 (expression -> variable .)
    *               reduce using rule 28 (expression -> variable .)
    /               reduce using rule 28 (expression -> variable .)
    DOTADD          reduce using rule 28 (expression -> variable .)
    DOTSUB          reduce using rule 28 (expression -> variable .)
    DOTMUL          reduce using rule 28 (expression -> variable .)
    DOTDIV          reduce using rule 28 (expression -> variable .)
    '               reduce using rule 28 (expression -> variable .)
    ;               reduce using rule 28 (expression -> variable .)
    ,               reduce using rule 28 (expression -> variable .)
    <               reduce using rule 28 (expression -> variable .)
    >               reduce using rule 28 (expression -> variable .)
    EQUAL           reduce using rule 28 (expression -> variable .)
    NOTEQUAL        reduce using rule 28 (expression -> variable .)
    LESSEQUAL       reduce using rule 28 (expression -> variable .)
    GREATEREQUAL    reduce using rule 28 (expression -> variable .)
    )               reduce using rule 28 (expression -> variable .)
    ]               reduce using rule 28 (expression -> variable .)
    :               reduce using rule 28 (expression -> variable .)
    {               reduce using rule 28 (expression -> variable .)
    IF              reduce using rule 28 (expression -> variable .)
    FOR             reduce using rule 28 (expression -> variable .)
    WHILE           reduce using rule 28 (expression -> variable .)
    BREAK           reduce using rule 28 (expression -> variable .)
    CONTINUE        reduce using rule 28 (expression -> variable .)
    RETURN          reduce using rule 28 (expression -> variable .)
    PRINT           reduce using rule 28 (expression -> variable .)
    ID              reduce using rule 28 (expression -> variable .)


state 39

    (63) expression -> - . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 72
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 40

    (64) expression -> ( . expression )
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 73
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 41

    (66) expression -> matrix_func . ( INTEGER )
    (67) expression -> matrix_func . ( INTEGER , INTEGER )

    (               shift and go to state 74


state 42

    (32) singleton -> INTEGER .

    +               reduce using rule 32 (singleton -> INTEGER .)
    -               reduce using rule 32 (singleton -> INTEGER .)
    *               reduce using rule 32 (singleton -> INTEGER .)
    /               reduce using rule 32 (singleton -> INTEGER .)
    DOTADD          reduce using rule 32 (singleton -> INTEGER .)
    DOTSUB          reduce using rule 32 (singleton -> INTEGER .)
    DOTMUL          reduce using rule 32 (singleton -> INTEGER .)
    DOTDIV          reduce using rule 32 (singleton -> INTEGER .)
    '               reduce using rule 32 (singleton -> INTEGER .)
    ;               reduce using rule 32 (singleton -> INTEGER .)
    ,               reduce using rule 32 (singleton -> INTEGER .)
    <               reduce using rule 32 (singleton -> INTEGER .)
    >               reduce using rule 32 (singleton -> INTEGER .)
    EQUAL           reduce using rule 32 (singleton -> INTEGER .)
    NOTEQUAL        reduce using rule 32 (singleton -> INTEGER .)
    LESSEQUAL       reduce using rule 32 (singleton -> INTEGER .)
    GREATEREQUAL    reduce using rule 32 (singleton -> INTEGER .)
    )               reduce using rule 32 (singleton -> INTEGER .)
    ]               reduce using rule 32 (singleton -> INTEGER .)
    :               reduce using rule 32 (singleton -> INTEGER .)
    {               reduce using rule 32 (singleton -> INTEGER .)
    IF              reduce using rule 32 (singleton -> INTEGER .)
    FOR             reduce using rule 32 (singleton -> INTEGER .)
    WHILE           reduce using rule 32 (singleton -> INTEGER .)
    BREAK           reduce using rule 32 (singleton -> INTEGER .)
    CONTINUE        reduce using rule 32 (singleton -> INTEGER .)
    RETURN          reduce using rule 32 (singleton -> INTEGER .)
    PRINT           reduce using rule 32 (singleton -> INTEGER .)
    ID              reduce using rule 32 (singleton -> INTEGER .)


state 43

    (31) singleton -> STRING .

    +               reduce using rule 31 (singleton -> STRING .)
    -               reduce using rule 31 (singleton -> STRING .)
    *               reduce using rule 31 (singleton -> STRING .)
    /               reduce using rule 31 (singleton -> STRING .)
    DOTADD          reduce using rule 31 (singleton -> STRING .)
    DOTSUB          reduce using rule 31 (singleton -> STRING .)
    DOTMUL          reduce using rule 31 (singleton -> STRING .)
    DOTDIV          reduce using rule 31 (singleton -> STRING .)
    '               reduce using rule 31 (singleton -> STRING .)
    ;               reduce using rule 31 (singleton -> STRING .)
    ,               reduce using rule 31 (singleton -> STRING .)
    <               reduce using rule 31 (singleton -> STRING .)
    >               reduce using rule 31 (singleton -> STRING .)
    EQUAL           reduce using rule 31 (singleton -> STRING .)
    NOTEQUAL        reduce using rule 31 (singleton -> STRING .)
    LESSEQUAL       reduce using rule 31 (singleton -> STRING .)
    GREATEREQUAL    reduce using rule 31 (singleton -> STRING .)
    )               reduce using rule 31 (singleton -> STRING .)
    ]               reduce using rule 31 (singleton -> STRING .)
    :               reduce using rule 31 (singleton -> STRING .)
    {               reduce using rule 31 (singleton -> STRING .)
    IF              reduce using rule 31 (singleton -> STRING .)
    FOR             reduce using rule 31 (singleton -> STRING .)
    WHILE           reduce using rule 31 (singleton -> STRING .)
    BREAK           reduce using rule 31 (singleton -> STRING .)
    CONTINUE        reduce using rule 31 (singleton -> STRING .)
    RETURN          reduce using rule 31 (singleton -> STRING .)
    PRINT           reduce using rule 31 (singleton -> STRING .)
    ID              reduce using rule 31 (singleton -> STRING .)


state 44

    (33) singleton -> FLOAT .

    +               reduce using rule 33 (singleton -> FLOAT .)
    -               reduce using rule 33 (singleton -> FLOAT .)
    *               reduce using rule 33 (singleton -> FLOAT .)
    /               reduce using rule 33 (singleton -> FLOAT .)
    DOTADD          reduce using rule 33 (singleton -> FLOAT .)
    DOTSUB          reduce using rule 33 (singleton -> FLOAT .)
    DOTMUL          reduce using rule 33 (singleton -> FLOAT .)
    DOTDIV          reduce using rule 33 (singleton -> FLOAT .)
    '               reduce using rule 33 (singleton -> FLOAT .)
    ;               reduce using rule 33 (singleton -> FLOAT .)
    ,               reduce using rule 33 (singleton -> FLOAT .)
    <               reduce using rule 33 (singleton -> FLOAT .)
    >               reduce using rule 33 (singleton -> FLOAT .)
    EQUAL           reduce using rule 33 (singleton -> FLOAT .)
    NOTEQUAL        reduce using rule 33 (singleton -> FLOAT .)
    LESSEQUAL       reduce using rule 33 (singleton -> FLOAT .)
    GREATEREQUAL    reduce using rule 33 (singleton -> FLOAT .)
    )               reduce using rule 33 (singleton -> FLOAT .)
    ]               reduce using rule 33 (singleton -> FLOAT .)
    :               reduce using rule 33 (singleton -> FLOAT .)
    {               reduce using rule 33 (singleton -> FLOAT .)
    IF              reduce using rule 33 (singleton -> FLOAT .)
    FOR             reduce using rule 33 (singleton -> FLOAT .)
    WHILE           reduce using rule 33 (singleton -> FLOAT .)
    BREAK           reduce using rule 33 (singleton -> FLOAT .)
    CONTINUE        reduce using rule 33 (singleton -> FLOAT .)
    RETURN          reduce using rule 33 (singleton -> FLOAT .)
    PRINT           reduce using rule 33 (singleton -> FLOAT .)
    ID              reduce using rule 33 (singleton -> FLOAT .)


state 45

    (34) vector -> [ . expressions ]
    (35) vector -> [ . ]
    (38) matrix -> [ . vectors ]
    (29) expressions -> . expressions , expression
    (30) expressions -> . expression
    (36) vectors -> . vectors , vector
    (37) vectors -> . vector
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    ]               shift and go to state 76
    -               shift and go to state 39
    (               shift and go to state 40
    [               shift and go to state 45
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expressions                    shift and go to state 75
    vectors                        shift and go to state 77
    expression                     shift and go to state 50
    vector                         shift and go to state 78
    singleton                      shift and go to state 35
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 46

    (68) matrix_func -> EYE .

    (               reduce using rule 68 (matrix_func -> EYE .)


state 47

    (69) matrix_func -> ONES .

    (               reduce using rule 69 (matrix_func -> ONES .)


state 48

    (70) matrix_func -> ZEROS .

    (               reduce using rule 70 (matrix_func -> ZEROS .)


state 49

    (24) print -> PRINT expressions .
    (29) expressions -> expressions . , expression

    ;               reduce using rule 24 (print -> PRINT expressions .)
    ,               shift and go to state 79


state 50

    (30) expressions -> expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ,               reduce using rule 30 (expressions -> expression .)
    ;               reduce using rule 30 (expressions -> expression .)
    ]               reduce using rule 30 (expressions -> expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 51

    (39) assign -> variable = . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    variable                       shift and go to state 38
    expression                     shift and go to state 80
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    matrix_func                    shift and go to state 41

state 52

    (40) assign -> variable calculation_assign . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    variable                       shift and go to state 38
    expression                     shift and go to state 81
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    matrix_func                    shift and go to state 41

state 53

    (41) calculation_assign -> ADDASSIGN .

    -               reduce using rule 41 (calculation_assign -> ADDASSIGN .)
    (               reduce using rule 41 (calculation_assign -> ADDASSIGN .)
    STRING          reduce using rule 41 (calculation_assign -> ADDASSIGN .)
    INTEGER         reduce using rule 41 (calculation_assign -> ADDASSIGN .)
    FLOAT           reduce using rule 41 (calculation_assign -> ADDASSIGN .)
    [               reduce using rule 41 (calculation_assign -> ADDASSIGN .)
    ID              reduce using rule 41 (calculation_assign -> ADDASSIGN .)
    EYE             reduce using rule 41 (calculation_assign -> ADDASSIGN .)
    ONES            reduce using rule 41 (calculation_assign -> ADDASSIGN .)
    ZEROS           reduce using rule 41 (calculation_assign -> ADDASSIGN .)


state 54

    (42) calculation_assign -> SUBASSIGN .

    -               reduce using rule 42 (calculation_assign -> SUBASSIGN .)
    (               reduce using rule 42 (calculation_assign -> SUBASSIGN .)
    STRING          reduce using rule 42 (calculation_assign -> SUBASSIGN .)
    INTEGER         reduce using rule 42 (calculation_assign -> SUBASSIGN .)
    FLOAT           reduce using rule 42 (calculation_assign -> SUBASSIGN .)
    [               reduce using rule 42 (calculation_assign -> SUBASSIGN .)
    ID              reduce using rule 42 (calculation_assign -> SUBASSIGN .)
    EYE             reduce using rule 42 (calculation_assign -> SUBASSIGN .)
    ONES            reduce using rule 42 (calculation_assign -> SUBASSIGN .)
    ZEROS           reduce using rule 42 (calculation_assign -> SUBASSIGN .)


state 55

    (43) calculation_assign -> MULASSIGN .

    -               reduce using rule 43 (calculation_assign -> MULASSIGN .)
    (               reduce using rule 43 (calculation_assign -> MULASSIGN .)
    STRING          reduce using rule 43 (calculation_assign -> MULASSIGN .)
    INTEGER         reduce using rule 43 (calculation_assign -> MULASSIGN .)
    FLOAT           reduce using rule 43 (calculation_assign -> MULASSIGN .)
    [               reduce using rule 43 (calculation_assign -> MULASSIGN .)
    ID              reduce using rule 43 (calculation_assign -> MULASSIGN .)
    EYE             reduce using rule 43 (calculation_assign -> MULASSIGN .)
    ONES            reduce using rule 43 (calculation_assign -> MULASSIGN .)
    ZEROS           reduce using rule 43 (calculation_assign -> MULASSIGN .)


state 56

    (44) calculation_assign -> DIVASSIGN .

    -               reduce using rule 44 (calculation_assign -> DIVASSIGN .)
    (               reduce using rule 44 (calculation_assign -> DIVASSIGN .)
    STRING          reduce using rule 44 (calculation_assign -> DIVASSIGN .)
    INTEGER         reduce using rule 44 (calculation_assign -> DIVASSIGN .)
    FLOAT           reduce using rule 44 (calculation_assign -> DIVASSIGN .)
    [               reduce using rule 44 (calculation_assign -> DIVASSIGN .)
    ID              reduce using rule 44 (calculation_assign -> DIVASSIGN .)
    EYE             reduce using rule 44 (calculation_assign -> DIVASSIGN .)
    ONES            reduce using rule 44 (calculation_assign -> DIVASSIGN .)
    ZEROS           reduce using rule 44 (calculation_assign -> DIVASSIGN .)


state 57

    (14) block -> { instructions } .

    {               reduce using rule 14 (block -> { instructions } .)
    IF              reduce using rule 14 (block -> { instructions } .)
    FOR             reduce using rule 14 (block -> { instructions } .)
    WHILE           reduce using rule 14 (block -> { instructions } .)
    BREAK           reduce using rule 14 (block -> { instructions } .)
    CONTINUE        reduce using rule 14 (block -> { instructions } .)
    RETURN          reduce using rule 14 (block -> { instructions } .)
    PRINT           reduce using rule 14 (block -> { instructions } .)
    ID              reduce using rule 14 (block -> { instructions } .)
    $end            reduce using rule 14 (block -> { instructions } .)
    }               reduce using rule 14 (block -> { instructions } .)
    ELSE            reduce using rule 14 (block -> { instructions } .)


state 58

    (15) if -> IF ( condition . ) instruction
    (16) if -> IF ( condition . ) instruction ELSE instruction

    )               shift and go to state 82


state 59

    (54) condition -> expression . comparator expression
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '
    (48) comparator -> . <
    (49) comparator -> . >
    (50) comparator -> . EQUAL
    (51) comparator -> . NOTEQUAL
    (52) comparator -> . LESSEQUAL
    (53) comparator -> . GREATEREQUAL

    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71
    <               shift and go to state 84
    >               shift and go to state 85
    EQUAL           shift and go to state 86
    NOTEQUAL        shift and go to state 87
    LESSEQUAL       shift and go to state 88
    GREATEREQUAL    shift and go to state 89

    comparator                     shift and go to state 83

state 60

    (17) for -> FOR ID = . range instruction
    (18) range -> . expression : expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    range                          shift and go to state 90
    expression                     shift and go to state 91
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 61

    (46) variable -> ID [ INTEGER . ]
    (47) variable -> ID [ INTEGER . , INTEGER ]

    ]               shift and go to state 92
    ,               shift and go to state 93


state 62

    (19) while -> WHILE ( condition . ) instruction

    )               shift and go to state 94


state 63

    (55) expression -> expression + . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 95
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 64

    (56) expression -> expression - . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 96
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 65

    (57) expression -> expression * . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 97
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 66

    (58) expression -> expression / . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 98
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 67

    (59) expression -> expression DOTADD . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 99
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 68

    (60) expression -> expression DOTSUB . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 100
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 69

    (61) expression -> expression DOTMUL . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 101
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 70

    (62) expression -> expression DOTDIV . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 102
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 71

    (65) expression -> expression ' .

    +               reduce using rule 65 (expression -> expression ' .)
    -               reduce using rule 65 (expression -> expression ' .)
    *               reduce using rule 65 (expression -> expression ' .)
    /               reduce using rule 65 (expression -> expression ' .)
    DOTADD          reduce using rule 65 (expression -> expression ' .)
    DOTSUB          reduce using rule 65 (expression -> expression ' .)
    DOTMUL          reduce using rule 65 (expression -> expression ' .)
    DOTDIV          reduce using rule 65 (expression -> expression ' .)
    '               reduce using rule 65 (expression -> expression ' .)
    ;               reduce using rule 65 (expression -> expression ' .)
    ,               reduce using rule 65 (expression -> expression ' .)
    <               reduce using rule 65 (expression -> expression ' .)
    >               reduce using rule 65 (expression -> expression ' .)
    EQUAL           reduce using rule 65 (expression -> expression ' .)
    NOTEQUAL        reduce using rule 65 (expression -> expression ' .)
    LESSEQUAL       reduce using rule 65 (expression -> expression ' .)
    GREATEREQUAL    reduce using rule 65 (expression -> expression ' .)
    )               reduce using rule 65 (expression -> expression ' .)
    ]               reduce using rule 65 (expression -> expression ' .)
    :               reduce using rule 65 (expression -> expression ' .)
    {               reduce using rule 65 (expression -> expression ' .)
    IF              reduce using rule 65 (expression -> expression ' .)
    FOR             reduce using rule 65 (expression -> expression ' .)
    WHILE           reduce using rule 65 (expression -> expression ' .)
    BREAK           reduce using rule 65 (expression -> expression ' .)
    CONTINUE        reduce using rule 65 (expression -> expression ' .)
    RETURN          reduce using rule 65 (expression -> expression ' .)
    PRINT           reduce using rule 65 (expression -> expression ' .)
    ID              reduce using rule 65 (expression -> expression ' .)


state 72

    (63) expression -> - expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    +               reduce using rule 63 (expression -> - expression .)
    -               reduce using rule 63 (expression -> - expression .)
    *               reduce using rule 63 (expression -> - expression .)
    /               reduce using rule 63 (expression -> - expression .)
    DOTADD          reduce using rule 63 (expression -> - expression .)
    DOTSUB          reduce using rule 63 (expression -> - expression .)
    DOTMUL          reduce using rule 63 (expression -> - expression .)
    DOTDIV          reduce using rule 63 (expression -> - expression .)
    '               reduce using rule 63 (expression -> - expression .)
    ;               reduce using rule 63 (expression -> - expression .)
    ,               reduce using rule 63 (expression -> - expression .)
    <               reduce using rule 63 (expression -> - expression .)
    >               reduce using rule 63 (expression -> - expression .)
    EQUAL           reduce using rule 63 (expression -> - expression .)
    NOTEQUAL        reduce using rule 63 (expression -> - expression .)
    LESSEQUAL       reduce using rule 63 (expression -> - expression .)
    GREATEREQUAL    reduce using rule 63 (expression -> - expression .)
    )               reduce using rule 63 (expression -> - expression .)
    ]               reduce using rule 63 (expression -> - expression .)
    :               reduce using rule 63 (expression -> - expression .)
    {               reduce using rule 63 (expression -> - expression .)
    IF              reduce using rule 63 (expression -> - expression .)
    FOR             reduce using rule 63 (expression -> - expression .)
    WHILE           reduce using rule 63 (expression -> - expression .)
    BREAK           reduce using rule 63 (expression -> - expression .)
    CONTINUE        reduce using rule 63 (expression -> - expression .)
    RETURN          reduce using rule 63 (expression -> - expression .)
    PRINT           reduce using rule 63 (expression -> - expression .)
    ID              reduce using rule 63 (expression -> - expression .)

  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]
  ! DOTMUL          [ shift and go to state 69 ]
  ! DOTDIV          [ shift and go to state 70 ]
  ! '               [ shift and go to state 71 ]


state 73

    (64) expression -> ( expression . )
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    )               shift and go to state 103
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 74

    (66) expression -> matrix_func ( . INTEGER )
    (67) expression -> matrix_func ( . INTEGER , INTEGER )

    INTEGER         shift and go to state 104


state 75

    (34) vector -> [ expressions . ]
    (29) expressions -> expressions . , expression

    ]               shift and go to state 105
    ,               shift and go to state 79


state 76

    (35) vector -> [ ] .

    +               reduce using rule 35 (vector -> [ ] .)
    -               reduce using rule 35 (vector -> [ ] .)
    *               reduce using rule 35 (vector -> [ ] .)
    /               reduce using rule 35 (vector -> [ ] .)
    DOTADD          reduce using rule 35 (vector -> [ ] .)
    DOTSUB          reduce using rule 35 (vector -> [ ] .)
    DOTMUL          reduce using rule 35 (vector -> [ ] .)
    DOTDIV          reduce using rule 35 (vector -> [ ] .)
    '               reduce using rule 35 (vector -> [ ] .)
    ;               reduce using rule 35 (vector -> [ ] .)
    ,               reduce using rule 35 (vector -> [ ] .)
    <               reduce using rule 35 (vector -> [ ] .)
    >               reduce using rule 35 (vector -> [ ] .)
    EQUAL           reduce using rule 35 (vector -> [ ] .)
    NOTEQUAL        reduce using rule 35 (vector -> [ ] .)
    LESSEQUAL       reduce using rule 35 (vector -> [ ] .)
    GREATEREQUAL    reduce using rule 35 (vector -> [ ] .)
    )               reduce using rule 35 (vector -> [ ] .)
    ]               reduce using rule 35 (vector -> [ ] .)
    :               reduce using rule 35 (vector -> [ ] .)
    {               reduce using rule 35 (vector -> [ ] .)
    IF              reduce using rule 35 (vector -> [ ] .)
    FOR             reduce using rule 35 (vector -> [ ] .)
    WHILE           reduce using rule 35 (vector -> [ ] .)
    BREAK           reduce using rule 35 (vector -> [ ] .)
    CONTINUE        reduce using rule 35 (vector -> [ ] .)
    RETURN          reduce using rule 35 (vector -> [ ] .)
    PRINT           reduce using rule 35 (vector -> [ ] .)
    ID              reduce using rule 35 (vector -> [ ] .)


state 77

    (38) matrix -> [ vectors . ]
    (36) vectors -> vectors . , vector

    ]               shift and go to state 106
    ,               shift and go to state 107


state 78

    (37) vectors -> vector .
    (26) expression -> vector .

  ! reduce/reduce conflict for ] resolved using rule 26 (expression -> vector .)
  ! reduce/reduce conflict for , resolved using rule 26 (expression -> vector .)
    +               reduce using rule 26 (expression -> vector .)
    -               reduce using rule 26 (expression -> vector .)
    *               reduce using rule 26 (expression -> vector .)
    /               reduce using rule 26 (expression -> vector .)
    DOTADD          reduce using rule 26 (expression -> vector .)
    DOTSUB          reduce using rule 26 (expression -> vector .)
    DOTMUL          reduce using rule 26 (expression -> vector .)
    DOTDIV          reduce using rule 26 (expression -> vector .)
    '               reduce using rule 26 (expression -> vector .)
    ]               reduce using rule 26 (expression -> vector .)
    ,               reduce using rule 26 (expression -> vector .)

  ! ]               [ reduce using rule 37 (vectors -> vector .) ]
  ! ,               [ reduce using rule 37 (vectors -> vector .) ]


state 79

    (29) expressions -> expressions , . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 108
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 80

    (39) assign -> variable = expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               reduce using rule 39 (assign -> variable = expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 81

    (40) assign -> variable calculation_assign expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               reduce using rule 40 (assign -> variable calculation_assign expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 82

    (15) if -> IF ( condition ) . instruction
    (16) if -> IF ( condition ) . instruction ELSE instruction
    (5) instruction -> . block
    (6) instruction -> . if
    (7) instruction -> . for
    (8) instruction -> . while
    (9) instruction -> . break ;
    (10) instruction -> . continue ;
    (11) instruction -> . return ;
    (12) instruction -> . print ;
    (13) instruction -> . assign ;
    (14) block -> . { instructions }
    (15) if -> . IF ( condition ) instruction
    (16) if -> . IF ( condition ) instruction ELSE instruction
    (17) for -> . FOR ID = range instruction
    (19) while -> . WHILE ( condition ) instruction
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) print -> . PRINT expressions
    (39) assign -> . variable = expression
    (40) assign -> . variable calculation_assign expression
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]

    {               shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    ID              shift and go to state 16

    instruction                    shift and go to state 109
    block                          shift and go to state 4
    if                             shift and go to state 5
    for                            shift and go to state 6
    while                          shift and go to state 7
    break                          shift and go to state 8
    continue                       shift and go to state 9
    return                         shift and go to state 10
    print                          shift and go to state 11
    assign                         shift and go to state 12
    variable                       shift and go to state 22

state 83

    (54) condition -> expression comparator . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 110
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 84

    (48) comparator -> < .

    -               reduce using rule 48 (comparator -> < .)
    (               reduce using rule 48 (comparator -> < .)
    STRING          reduce using rule 48 (comparator -> < .)
    INTEGER         reduce using rule 48 (comparator -> < .)
    FLOAT           reduce using rule 48 (comparator -> < .)
    [               reduce using rule 48 (comparator -> < .)
    ID              reduce using rule 48 (comparator -> < .)
    EYE             reduce using rule 48 (comparator -> < .)
    ONES            reduce using rule 48 (comparator -> < .)
    ZEROS           reduce using rule 48 (comparator -> < .)


state 85

    (49) comparator -> > .

    -               reduce using rule 49 (comparator -> > .)
    (               reduce using rule 49 (comparator -> > .)
    STRING          reduce using rule 49 (comparator -> > .)
    INTEGER         reduce using rule 49 (comparator -> > .)
    FLOAT           reduce using rule 49 (comparator -> > .)
    [               reduce using rule 49 (comparator -> > .)
    ID              reduce using rule 49 (comparator -> > .)
    EYE             reduce using rule 49 (comparator -> > .)
    ONES            reduce using rule 49 (comparator -> > .)
    ZEROS           reduce using rule 49 (comparator -> > .)


state 86

    (50) comparator -> EQUAL .

    -               reduce using rule 50 (comparator -> EQUAL .)
    (               reduce using rule 50 (comparator -> EQUAL .)
    STRING          reduce using rule 50 (comparator -> EQUAL .)
    INTEGER         reduce using rule 50 (comparator -> EQUAL .)
    FLOAT           reduce using rule 50 (comparator -> EQUAL .)
    [               reduce using rule 50 (comparator -> EQUAL .)
    ID              reduce using rule 50 (comparator -> EQUAL .)
    EYE             reduce using rule 50 (comparator -> EQUAL .)
    ONES            reduce using rule 50 (comparator -> EQUAL .)
    ZEROS           reduce using rule 50 (comparator -> EQUAL .)


state 87

    (51) comparator -> NOTEQUAL .

    -               reduce using rule 51 (comparator -> NOTEQUAL .)
    (               reduce using rule 51 (comparator -> NOTEQUAL .)
    STRING          reduce using rule 51 (comparator -> NOTEQUAL .)
    INTEGER         reduce using rule 51 (comparator -> NOTEQUAL .)
    FLOAT           reduce using rule 51 (comparator -> NOTEQUAL .)
    [               reduce using rule 51 (comparator -> NOTEQUAL .)
    ID              reduce using rule 51 (comparator -> NOTEQUAL .)
    EYE             reduce using rule 51 (comparator -> NOTEQUAL .)
    ONES            reduce using rule 51 (comparator -> NOTEQUAL .)
    ZEROS           reduce using rule 51 (comparator -> NOTEQUAL .)


state 88

    (52) comparator -> LESSEQUAL .

    -               reduce using rule 52 (comparator -> LESSEQUAL .)
    (               reduce using rule 52 (comparator -> LESSEQUAL .)
    STRING          reduce using rule 52 (comparator -> LESSEQUAL .)
    INTEGER         reduce using rule 52 (comparator -> LESSEQUAL .)
    FLOAT           reduce using rule 52 (comparator -> LESSEQUAL .)
    [               reduce using rule 52 (comparator -> LESSEQUAL .)
    ID              reduce using rule 52 (comparator -> LESSEQUAL .)
    EYE             reduce using rule 52 (comparator -> LESSEQUAL .)
    ONES            reduce using rule 52 (comparator -> LESSEQUAL .)
    ZEROS           reduce using rule 52 (comparator -> LESSEQUAL .)


state 89

    (53) comparator -> GREATEREQUAL .

    -               reduce using rule 53 (comparator -> GREATEREQUAL .)
    (               reduce using rule 53 (comparator -> GREATEREQUAL .)
    STRING          reduce using rule 53 (comparator -> GREATEREQUAL .)
    INTEGER         reduce using rule 53 (comparator -> GREATEREQUAL .)
    FLOAT           reduce using rule 53 (comparator -> GREATEREQUAL .)
    [               reduce using rule 53 (comparator -> GREATEREQUAL .)
    ID              reduce using rule 53 (comparator -> GREATEREQUAL .)
    EYE             reduce using rule 53 (comparator -> GREATEREQUAL .)
    ONES            reduce using rule 53 (comparator -> GREATEREQUAL .)
    ZEROS           reduce using rule 53 (comparator -> GREATEREQUAL .)


state 90

    (17) for -> FOR ID = range . instruction
    (5) instruction -> . block
    (6) instruction -> . if
    (7) instruction -> . for
    (8) instruction -> . while
    (9) instruction -> . break ;
    (10) instruction -> . continue ;
    (11) instruction -> . return ;
    (12) instruction -> . print ;
    (13) instruction -> . assign ;
    (14) block -> . { instructions }
    (15) if -> . IF ( condition ) instruction
    (16) if -> . IF ( condition ) instruction ELSE instruction
    (17) for -> . FOR ID = range instruction
    (19) while -> . WHILE ( condition ) instruction
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) print -> . PRINT expressions
    (39) assign -> . variable = expression
    (40) assign -> . variable calculation_assign expression
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]

    {               shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    ID              shift and go to state 16

    instruction                    shift and go to state 111
    block                          shift and go to state 4
    if                             shift and go to state 5
    for                            shift and go to state 6
    while                          shift and go to state 7
    break                          shift and go to state 8
    continue                       shift and go to state 9
    return                         shift and go to state 10
    print                          shift and go to state 11
    assign                         shift and go to state 12
    variable                       shift and go to state 22

state 91

    (18) range -> expression . : expression
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    :               shift and go to state 112
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 92

    (46) variable -> ID [ INTEGER ] .

    =               reduce using rule 46 (variable -> ID [ INTEGER ] .)
    ADDASSIGN       reduce using rule 46 (variable -> ID [ INTEGER ] .)
    SUBASSIGN       reduce using rule 46 (variable -> ID [ INTEGER ] .)
    MULASSIGN       reduce using rule 46 (variable -> ID [ INTEGER ] .)
    DIVASSIGN       reduce using rule 46 (variable -> ID [ INTEGER ] .)
    +               reduce using rule 46 (variable -> ID [ INTEGER ] .)
    -               reduce using rule 46 (variable -> ID [ INTEGER ] .)
    *               reduce using rule 46 (variable -> ID [ INTEGER ] .)
    /               reduce using rule 46 (variable -> ID [ INTEGER ] .)
    DOTADD          reduce using rule 46 (variable -> ID [ INTEGER ] .)
    DOTSUB          reduce using rule 46 (variable -> ID [ INTEGER ] .)
    DOTMUL          reduce using rule 46 (variable -> ID [ INTEGER ] .)
    DOTDIV          reduce using rule 46 (variable -> ID [ INTEGER ] .)
    '               reduce using rule 46 (variable -> ID [ INTEGER ] .)
    ;               reduce using rule 46 (variable -> ID [ INTEGER ] .)
    ,               reduce using rule 46 (variable -> ID [ INTEGER ] .)
    <               reduce using rule 46 (variable -> ID [ INTEGER ] .)
    >               reduce using rule 46 (variable -> ID [ INTEGER ] .)
    EQUAL           reduce using rule 46 (variable -> ID [ INTEGER ] .)
    NOTEQUAL        reduce using rule 46 (variable -> ID [ INTEGER ] .)
    LESSEQUAL       reduce using rule 46 (variable -> ID [ INTEGER ] .)
    GREATEREQUAL    reduce using rule 46 (variable -> ID [ INTEGER ] .)
    )               reduce using rule 46 (variable -> ID [ INTEGER ] .)
    ]               reduce using rule 46 (variable -> ID [ INTEGER ] .)
    :               reduce using rule 46 (variable -> ID [ INTEGER ] .)
    {               reduce using rule 46 (variable -> ID [ INTEGER ] .)
    IF              reduce using rule 46 (variable -> ID [ INTEGER ] .)
    FOR             reduce using rule 46 (variable -> ID [ INTEGER ] .)
    WHILE           reduce using rule 46 (variable -> ID [ INTEGER ] .)
    BREAK           reduce using rule 46 (variable -> ID [ INTEGER ] .)
    CONTINUE        reduce using rule 46 (variable -> ID [ INTEGER ] .)
    RETURN          reduce using rule 46 (variable -> ID [ INTEGER ] .)
    PRINT           reduce using rule 46 (variable -> ID [ INTEGER ] .)
    ID              reduce using rule 46 (variable -> ID [ INTEGER ] .)


state 93

    (47) variable -> ID [ INTEGER , . INTEGER ]

    INTEGER         shift and go to state 113


state 94

    (19) while -> WHILE ( condition ) . instruction
    (5) instruction -> . block
    (6) instruction -> . if
    (7) instruction -> . for
    (8) instruction -> . while
    (9) instruction -> . break ;
    (10) instruction -> . continue ;
    (11) instruction -> . return ;
    (12) instruction -> . print ;
    (13) instruction -> . assign ;
    (14) block -> . { instructions }
    (15) if -> . IF ( condition ) instruction
    (16) if -> . IF ( condition ) instruction ELSE instruction
    (17) for -> . FOR ID = range instruction
    (19) while -> . WHILE ( condition ) instruction
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) print -> . PRINT expressions
    (39) assign -> . variable = expression
    (40) assign -> . variable calculation_assign expression
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]

    {               shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    ID              shift and go to state 16

    instruction                    shift and go to state 114
    block                          shift and go to state 4
    if                             shift and go to state 5
    for                            shift and go to state 6
    while                          shift and go to state 7
    break                          shift and go to state 8
    continue                       shift and go to state 9
    return                         shift and go to state 10
    print                          shift and go to state 11
    assign                         shift and go to state 12
    variable                       shift and go to state 22

state 95

    (55) expression -> expression + expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    +               reduce using rule 55 (expression -> expression + expression .)
    -               reduce using rule 55 (expression -> expression + expression .)
    '               reduce using rule 55 (expression -> expression + expression .)
    ;               reduce using rule 55 (expression -> expression + expression .)
    ,               reduce using rule 55 (expression -> expression + expression .)
    <               reduce using rule 55 (expression -> expression + expression .)
    >               reduce using rule 55 (expression -> expression + expression .)
    EQUAL           reduce using rule 55 (expression -> expression + expression .)
    NOTEQUAL        reduce using rule 55 (expression -> expression + expression .)
    LESSEQUAL       reduce using rule 55 (expression -> expression + expression .)
    GREATEREQUAL    reduce using rule 55 (expression -> expression + expression .)
    )               reduce using rule 55 (expression -> expression + expression .)
    ]               reduce using rule 55 (expression -> expression + expression .)
    :               reduce using rule 55 (expression -> expression + expression .)
    {               reduce using rule 55 (expression -> expression + expression .)
    IF              reduce using rule 55 (expression -> expression + expression .)
    FOR             reduce using rule 55 (expression -> expression + expression .)
    WHILE           reduce using rule 55 (expression -> expression + expression .)
    BREAK           reduce using rule 55 (expression -> expression + expression .)
    CONTINUE        reduce using rule 55 (expression -> expression + expression .)
    RETURN          reduce using rule 55 (expression -> expression + expression .)
    PRINT           reduce using rule 55 (expression -> expression + expression .)
    ID              reduce using rule 55 (expression -> expression + expression .)
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70

  ! *               [ reduce using rule 55 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 55 (expression -> expression + expression .) ]
  ! DOTADD          [ reduce using rule 55 (expression -> expression + expression .) ]
  ! DOTSUB          [ reduce using rule 55 (expression -> expression + expression .) ]
  ! DOTMUL          [ reduce using rule 55 (expression -> expression + expression .) ]
  ! DOTDIV          [ reduce using rule 55 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! '               [ shift and go to state 71 ]


state 96

    (56) expression -> expression - expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    +               reduce using rule 56 (expression -> expression - expression .)
    -               reduce using rule 56 (expression -> expression - expression .)
    '               reduce using rule 56 (expression -> expression - expression .)
    ;               reduce using rule 56 (expression -> expression - expression .)
    ,               reduce using rule 56 (expression -> expression - expression .)
    <               reduce using rule 56 (expression -> expression - expression .)
    >               reduce using rule 56 (expression -> expression - expression .)
    EQUAL           reduce using rule 56 (expression -> expression - expression .)
    NOTEQUAL        reduce using rule 56 (expression -> expression - expression .)
    LESSEQUAL       reduce using rule 56 (expression -> expression - expression .)
    GREATEREQUAL    reduce using rule 56 (expression -> expression - expression .)
    )               reduce using rule 56 (expression -> expression - expression .)
    ]               reduce using rule 56 (expression -> expression - expression .)
    :               reduce using rule 56 (expression -> expression - expression .)
    {               reduce using rule 56 (expression -> expression - expression .)
    IF              reduce using rule 56 (expression -> expression - expression .)
    FOR             reduce using rule 56 (expression -> expression - expression .)
    WHILE           reduce using rule 56 (expression -> expression - expression .)
    BREAK           reduce using rule 56 (expression -> expression - expression .)
    CONTINUE        reduce using rule 56 (expression -> expression - expression .)
    RETURN          reduce using rule 56 (expression -> expression - expression .)
    PRINT           reduce using rule 56 (expression -> expression - expression .)
    ID              reduce using rule 56 (expression -> expression - expression .)
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70

  ! *               [ reduce using rule 56 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 56 (expression -> expression - expression .) ]
  ! DOTADD          [ reduce using rule 56 (expression -> expression - expression .) ]
  ! DOTSUB          [ reduce using rule 56 (expression -> expression - expression .) ]
  ! DOTMUL          [ reduce using rule 56 (expression -> expression - expression .) ]
  ! DOTDIV          [ reduce using rule 56 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! '               [ shift and go to state 71 ]


state 97

    (57) expression -> expression * expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    +               reduce using rule 57 (expression -> expression * expression .)
    -               reduce using rule 57 (expression -> expression * expression .)
    *               reduce using rule 57 (expression -> expression * expression .)
    /               reduce using rule 57 (expression -> expression * expression .)
    DOTADD          reduce using rule 57 (expression -> expression * expression .)
    DOTSUB          reduce using rule 57 (expression -> expression * expression .)
    '               reduce using rule 57 (expression -> expression * expression .)
    ;               reduce using rule 57 (expression -> expression * expression .)
    ,               reduce using rule 57 (expression -> expression * expression .)
    <               reduce using rule 57 (expression -> expression * expression .)
    >               reduce using rule 57 (expression -> expression * expression .)
    EQUAL           reduce using rule 57 (expression -> expression * expression .)
    NOTEQUAL        reduce using rule 57 (expression -> expression * expression .)
    LESSEQUAL       reduce using rule 57 (expression -> expression * expression .)
    GREATEREQUAL    reduce using rule 57 (expression -> expression * expression .)
    )               reduce using rule 57 (expression -> expression * expression .)
    ]               reduce using rule 57 (expression -> expression * expression .)
    :               reduce using rule 57 (expression -> expression * expression .)
    {               reduce using rule 57 (expression -> expression * expression .)
    IF              reduce using rule 57 (expression -> expression * expression .)
    FOR             reduce using rule 57 (expression -> expression * expression .)
    WHILE           reduce using rule 57 (expression -> expression * expression .)
    BREAK           reduce using rule 57 (expression -> expression * expression .)
    CONTINUE        reduce using rule 57 (expression -> expression * expression .)
    RETURN          reduce using rule 57 (expression -> expression * expression .)
    PRINT           reduce using rule 57 (expression -> expression * expression .)
    ID              reduce using rule 57 (expression -> expression * expression .)
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70

  ! DOTMUL          [ reduce using rule 57 (expression -> expression * expression .) ]
  ! DOTDIV          [ reduce using rule 57 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]
  ! '               [ shift and go to state 71 ]


state 98

    (58) expression -> expression / expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    +               reduce using rule 58 (expression -> expression / expression .)
    -               reduce using rule 58 (expression -> expression / expression .)
    *               reduce using rule 58 (expression -> expression / expression .)
    /               reduce using rule 58 (expression -> expression / expression .)
    DOTADD          reduce using rule 58 (expression -> expression / expression .)
    DOTSUB          reduce using rule 58 (expression -> expression / expression .)
    '               reduce using rule 58 (expression -> expression / expression .)
    ;               reduce using rule 58 (expression -> expression / expression .)
    ,               reduce using rule 58 (expression -> expression / expression .)
    <               reduce using rule 58 (expression -> expression / expression .)
    >               reduce using rule 58 (expression -> expression / expression .)
    EQUAL           reduce using rule 58 (expression -> expression / expression .)
    NOTEQUAL        reduce using rule 58 (expression -> expression / expression .)
    LESSEQUAL       reduce using rule 58 (expression -> expression / expression .)
    GREATEREQUAL    reduce using rule 58 (expression -> expression / expression .)
    )               reduce using rule 58 (expression -> expression / expression .)
    ]               reduce using rule 58 (expression -> expression / expression .)
    :               reduce using rule 58 (expression -> expression / expression .)
    {               reduce using rule 58 (expression -> expression / expression .)
    IF              reduce using rule 58 (expression -> expression / expression .)
    FOR             reduce using rule 58 (expression -> expression / expression .)
    WHILE           reduce using rule 58 (expression -> expression / expression .)
    BREAK           reduce using rule 58 (expression -> expression / expression .)
    CONTINUE        reduce using rule 58 (expression -> expression / expression .)
    RETURN          reduce using rule 58 (expression -> expression / expression .)
    PRINT           reduce using rule 58 (expression -> expression / expression .)
    ID              reduce using rule 58 (expression -> expression / expression .)
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70

  ! DOTMUL          [ reduce using rule 58 (expression -> expression / expression .) ]
  ! DOTDIV          [ reduce using rule 58 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]
  ! '               [ shift and go to state 71 ]


state 99

    (59) expression -> expression DOTADD expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    +               reduce using rule 59 (expression -> expression DOTADD expression .)
    -               reduce using rule 59 (expression -> expression DOTADD expression .)
    DOTADD          reduce using rule 59 (expression -> expression DOTADD expression .)
    DOTSUB          reduce using rule 59 (expression -> expression DOTADD expression .)
    '               reduce using rule 59 (expression -> expression DOTADD expression .)
    ;               reduce using rule 59 (expression -> expression DOTADD expression .)
    ,               reduce using rule 59 (expression -> expression DOTADD expression .)
    <               reduce using rule 59 (expression -> expression DOTADD expression .)
    >               reduce using rule 59 (expression -> expression DOTADD expression .)
    EQUAL           reduce using rule 59 (expression -> expression DOTADD expression .)
    NOTEQUAL        reduce using rule 59 (expression -> expression DOTADD expression .)
    LESSEQUAL       reduce using rule 59 (expression -> expression DOTADD expression .)
    GREATEREQUAL    reduce using rule 59 (expression -> expression DOTADD expression .)
    )               reduce using rule 59 (expression -> expression DOTADD expression .)
    ]               reduce using rule 59 (expression -> expression DOTADD expression .)
    :               reduce using rule 59 (expression -> expression DOTADD expression .)
    {               reduce using rule 59 (expression -> expression DOTADD expression .)
    IF              reduce using rule 59 (expression -> expression DOTADD expression .)
    FOR             reduce using rule 59 (expression -> expression DOTADD expression .)
    WHILE           reduce using rule 59 (expression -> expression DOTADD expression .)
    BREAK           reduce using rule 59 (expression -> expression DOTADD expression .)
    CONTINUE        reduce using rule 59 (expression -> expression DOTADD expression .)
    RETURN          reduce using rule 59 (expression -> expression DOTADD expression .)
    PRINT           reduce using rule 59 (expression -> expression DOTADD expression .)
    ID              reduce using rule 59 (expression -> expression DOTADD expression .)
    *               shift and go to state 65
    /               shift and go to state 66
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70

  ! *               [ reduce using rule 59 (expression -> expression DOTADD expression .) ]
  ! /               [ reduce using rule 59 (expression -> expression DOTADD expression .) ]
  ! DOTMUL          [ reduce using rule 59 (expression -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 59 (expression -> expression DOTADD expression .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]
  ! '               [ shift and go to state 71 ]


state 100

    (60) expression -> expression DOTSUB expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    +               reduce using rule 60 (expression -> expression DOTSUB expression .)
    -               reduce using rule 60 (expression -> expression DOTSUB expression .)
    DOTADD          reduce using rule 60 (expression -> expression DOTSUB expression .)
    DOTSUB          reduce using rule 60 (expression -> expression DOTSUB expression .)
    '               reduce using rule 60 (expression -> expression DOTSUB expression .)
    ;               reduce using rule 60 (expression -> expression DOTSUB expression .)
    ,               reduce using rule 60 (expression -> expression DOTSUB expression .)
    <               reduce using rule 60 (expression -> expression DOTSUB expression .)
    >               reduce using rule 60 (expression -> expression DOTSUB expression .)
    EQUAL           reduce using rule 60 (expression -> expression DOTSUB expression .)
    NOTEQUAL        reduce using rule 60 (expression -> expression DOTSUB expression .)
    LESSEQUAL       reduce using rule 60 (expression -> expression DOTSUB expression .)
    GREATEREQUAL    reduce using rule 60 (expression -> expression DOTSUB expression .)
    )               reduce using rule 60 (expression -> expression DOTSUB expression .)
    ]               reduce using rule 60 (expression -> expression DOTSUB expression .)
    :               reduce using rule 60 (expression -> expression DOTSUB expression .)
    {               reduce using rule 60 (expression -> expression DOTSUB expression .)
    IF              reduce using rule 60 (expression -> expression DOTSUB expression .)
    FOR             reduce using rule 60 (expression -> expression DOTSUB expression .)
    WHILE           reduce using rule 60 (expression -> expression DOTSUB expression .)
    BREAK           reduce using rule 60 (expression -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 60 (expression -> expression DOTSUB expression .)
    RETURN          reduce using rule 60 (expression -> expression DOTSUB expression .)
    PRINT           reduce using rule 60 (expression -> expression DOTSUB expression .)
    ID              reduce using rule 60 (expression -> expression DOTSUB expression .)
    *               shift and go to state 65
    /               shift and go to state 66
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70

  ! *               [ reduce using rule 60 (expression -> expression DOTSUB expression .) ]
  ! /               [ reduce using rule 60 (expression -> expression DOTSUB expression .) ]
  ! DOTMUL          [ reduce using rule 60 (expression -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 60 (expression -> expression DOTSUB expression .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]
  ! '               [ shift and go to state 71 ]


state 101

    (61) expression -> expression DOTMUL expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    +               reduce using rule 61 (expression -> expression DOTMUL expression .)
    -               reduce using rule 61 (expression -> expression DOTMUL expression .)
    *               reduce using rule 61 (expression -> expression DOTMUL expression .)
    /               reduce using rule 61 (expression -> expression DOTMUL expression .)
    DOTADD          reduce using rule 61 (expression -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 61 (expression -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 61 (expression -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 61 (expression -> expression DOTMUL expression .)
    '               reduce using rule 61 (expression -> expression DOTMUL expression .)
    ;               reduce using rule 61 (expression -> expression DOTMUL expression .)
    ,               reduce using rule 61 (expression -> expression DOTMUL expression .)
    <               reduce using rule 61 (expression -> expression DOTMUL expression .)
    >               reduce using rule 61 (expression -> expression DOTMUL expression .)
    EQUAL           reduce using rule 61 (expression -> expression DOTMUL expression .)
    NOTEQUAL        reduce using rule 61 (expression -> expression DOTMUL expression .)
    LESSEQUAL       reduce using rule 61 (expression -> expression DOTMUL expression .)
    GREATEREQUAL    reduce using rule 61 (expression -> expression DOTMUL expression .)
    )               reduce using rule 61 (expression -> expression DOTMUL expression .)
    ]               reduce using rule 61 (expression -> expression DOTMUL expression .)
    :               reduce using rule 61 (expression -> expression DOTMUL expression .)
    {               reduce using rule 61 (expression -> expression DOTMUL expression .)
    IF              reduce using rule 61 (expression -> expression DOTMUL expression .)
    FOR             reduce using rule 61 (expression -> expression DOTMUL expression .)
    WHILE           reduce using rule 61 (expression -> expression DOTMUL expression .)
    BREAK           reduce using rule 61 (expression -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 61 (expression -> expression DOTMUL expression .)
    RETURN          reduce using rule 61 (expression -> expression DOTMUL expression .)
    PRINT           reduce using rule 61 (expression -> expression DOTMUL expression .)
    ID              reduce using rule 61 (expression -> expression DOTMUL expression .)

  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]
  ! DOTMUL          [ shift and go to state 69 ]
  ! DOTDIV          [ shift and go to state 70 ]
  ! '               [ shift and go to state 71 ]


state 102

    (62) expression -> expression DOTDIV expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    +               reduce using rule 62 (expression -> expression DOTDIV expression .)
    -               reduce using rule 62 (expression -> expression DOTDIV expression .)
    *               reduce using rule 62 (expression -> expression DOTDIV expression .)
    /               reduce using rule 62 (expression -> expression DOTDIV expression .)
    DOTADD          reduce using rule 62 (expression -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 62 (expression -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 62 (expression -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 62 (expression -> expression DOTDIV expression .)
    '               reduce using rule 62 (expression -> expression DOTDIV expression .)
    ;               reduce using rule 62 (expression -> expression DOTDIV expression .)
    ,               reduce using rule 62 (expression -> expression DOTDIV expression .)
    <               reduce using rule 62 (expression -> expression DOTDIV expression .)
    >               reduce using rule 62 (expression -> expression DOTDIV expression .)
    EQUAL           reduce using rule 62 (expression -> expression DOTDIV expression .)
    NOTEQUAL        reduce using rule 62 (expression -> expression DOTDIV expression .)
    LESSEQUAL       reduce using rule 62 (expression -> expression DOTDIV expression .)
    GREATEREQUAL    reduce using rule 62 (expression -> expression DOTDIV expression .)
    )               reduce using rule 62 (expression -> expression DOTDIV expression .)
    ]               reduce using rule 62 (expression -> expression DOTDIV expression .)
    :               reduce using rule 62 (expression -> expression DOTDIV expression .)
    {               reduce using rule 62 (expression -> expression DOTDIV expression .)
    IF              reduce using rule 62 (expression -> expression DOTDIV expression .)
    FOR             reduce using rule 62 (expression -> expression DOTDIV expression .)
    WHILE           reduce using rule 62 (expression -> expression DOTDIV expression .)
    BREAK           reduce using rule 62 (expression -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 62 (expression -> expression DOTDIV expression .)
    RETURN          reduce using rule 62 (expression -> expression DOTDIV expression .)
    PRINT           reduce using rule 62 (expression -> expression DOTDIV expression .)
    ID              reduce using rule 62 (expression -> expression DOTDIV expression .)

  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]
  ! DOTMUL          [ shift and go to state 69 ]
  ! DOTDIV          [ shift and go to state 70 ]
  ! '               [ shift and go to state 71 ]


state 103

    (64) expression -> ( expression ) .

    +               reduce using rule 64 (expression -> ( expression ) .)
    -               reduce using rule 64 (expression -> ( expression ) .)
    *               reduce using rule 64 (expression -> ( expression ) .)
    /               reduce using rule 64 (expression -> ( expression ) .)
    DOTADD          reduce using rule 64 (expression -> ( expression ) .)
    DOTSUB          reduce using rule 64 (expression -> ( expression ) .)
    DOTMUL          reduce using rule 64 (expression -> ( expression ) .)
    DOTDIV          reduce using rule 64 (expression -> ( expression ) .)
    '               reduce using rule 64 (expression -> ( expression ) .)
    ;               reduce using rule 64 (expression -> ( expression ) .)
    ,               reduce using rule 64 (expression -> ( expression ) .)
    <               reduce using rule 64 (expression -> ( expression ) .)
    >               reduce using rule 64 (expression -> ( expression ) .)
    EQUAL           reduce using rule 64 (expression -> ( expression ) .)
    NOTEQUAL        reduce using rule 64 (expression -> ( expression ) .)
    LESSEQUAL       reduce using rule 64 (expression -> ( expression ) .)
    GREATEREQUAL    reduce using rule 64 (expression -> ( expression ) .)
    )               reduce using rule 64 (expression -> ( expression ) .)
    ]               reduce using rule 64 (expression -> ( expression ) .)
    :               reduce using rule 64 (expression -> ( expression ) .)
    {               reduce using rule 64 (expression -> ( expression ) .)
    IF              reduce using rule 64 (expression -> ( expression ) .)
    FOR             reduce using rule 64 (expression -> ( expression ) .)
    WHILE           reduce using rule 64 (expression -> ( expression ) .)
    BREAK           reduce using rule 64 (expression -> ( expression ) .)
    CONTINUE        reduce using rule 64 (expression -> ( expression ) .)
    RETURN          reduce using rule 64 (expression -> ( expression ) .)
    PRINT           reduce using rule 64 (expression -> ( expression ) .)
    ID              reduce using rule 64 (expression -> ( expression ) .)


state 104

    (66) expression -> matrix_func ( INTEGER . )
    (67) expression -> matrix_func ( INTEGER . , INTEGER )

    )               shift and go to state 115
    ,               shift and go to state 116


state 105

    (34) vector -> [ expressions ] .

    +               reduce using rule 34 (vector -> [ expressions ] .)
    -               reduce using rule 34 (vector -> [ expressions ] .)
    *               reduce using rule 34 (vector -> [ expressions ] .)
    /               reduce using rule 34 (vector -> [ expressions ] .)
    DOTADD          reduce using rule 34 (vector -> [ expressions ] .)
    DOTSUB          reduce using rule 34 (vector -> [ expressions ] .)
    DOTMUL          reduce using rule 34 (vector -> [ expressions ] .)
    DOTDIV          reduce using rule 34 (vector -> [ expressions ] .)
    '               reduce using rule 34 (vector -> [ expressions ] .)
    ;               reduce using rule 34 (vector -> [ expressions ] .)
    ,               reduce using rule 34 (vector -> [ expressions ] .)
    <               reduce using rule 34 (vector -> [ expressions ] .)
    >               reduce using rule 34 (vector -> [ expressions ] .)
    EQUAL           reduce using rule 34 (vector -> [ expressions ] .)
    NOTEQUAL        reduce using rule 34 (vector -> [ expressions ] .)
    LESSEQUAL       reduce using rule 34 (vector -> [ expressions ] .)
    GREATEREQUAL    reduce using rule 34 (vector -> [ expressions ] .)
    )               reduce using rule 34 (vector -> [ expressions ] .)
    ]               reduce using rule 34 (vector -> [ expressions ] .)
    :               reduce using rule 34 (vector -> [ expressions ] .)
    {               reduce using rule 34 (vector -> [ expressions ] .)
    IF              reduce using rule 34 (vector -> [ expressions ] .)
    FOR             reduce using rule 34 (vector -> [ expressions ] .)
    WHILE           reduce using rule 34 (vector -> [ expressions ] .)
    BREAK           reduce using rule 34 (vector -> [ expressions ] .)
    CONTINUE        reduce using rule 34 (vector -> [ expressions ] .)
    RETURN          reduce using rule 34 (vector -> [ expressions ] .)
    PRINT           reduce using rule 34 (vector -> [ expressions ] .)
    ID              reduce using rule 34 (vector -> [ expressions ] .)


state 106

    (38) matrix -> [ vectors ] .

    +               reduce using rule 38 (matrix -> [ vectors ] .)
    -               reduce using rule 38 (matrix -> [ vectors ] .)
    *               reduce using rule 38 (matrix -> [ vectors ] .)
    /               reduce using rule 38 (matrix -> [ vectors ] .)
    DOTADD          reduce using rule 38 (matrix -> [ vectors ] .)
    DOTSUB          reduce using rule 38 (matrix -> [ vectors ] .)
    DOTMUL          reduce using rule 38 (matrix -> [ vectors ] .)
    DOTDIV          reduce using rule 38 (matrix -> [ vectors ] .)
    '               reduce using rule 38 (matrix -> [ vectors ] .)
    ;               reduce using rule 38 (matrix -> [ vectors ] .)
    ,               reduce using rule 38 (matrix -> [ vectors ] .)
    <               reduce using rule 38 (matrix -> [ vectors ] .)
    >               reduce using rule 38 (matrix -> [ vectors ] .)
    EQUAL           reduce using rule 38 (matrix -> [ vectors ] .)
    NOTEQUAL        reduce using rule 38 (matrix -> [ vectors ] .)
    LESSEQUAL       reduce using rule 38 (matrix -> [ vectors ] .)
    GREATEREQUAL    reduce using rule 38 (matrix -> [ vectors ] .)
    )               reduce using rule 38 (matrix -> [ vectors ] .)
    ]               reduce using rule 38 (matrix -> [ vectors ] .)
    :               reduce using rule 38 (matrix -> [ vectors ] .)
    {               reduce using rule 38 (matrix -> [ vectors ] .)
    IF              reduce using rule 38 (matrix -> [ vectors ] .)
    FOR             reduce using rule 38 (matrix -> [ vectors ] .)
    WHILE           reduce using rule 38 (matrix -> [ vectors ] .)
    BREAK           reduce using rule 38 (matrix -> [ vectors ] .)
    CONTINUE        reduce using rule 38 (matrix -> [ vectors ] .)
    RETURN          reduce using rule 38 (matrix -> [ vectors ] .)
    PRINT           reduce using rule 38 (matrix -> [ vectors ] .)
    ID              reduce using rule 38 (matrix -> [ vectors ] .)


state 107

    (36) vectors -> vectors , . vector
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]

    [               shift and go to state 118

    vector                         shift and go to state 117

state 108

    (29) expressions -> expressions , expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ,               reduce using rule 29 (expressions -> expressions , expression .)
    ;               reduce using rule 29 (expressions -> expressions , expression .)
    ]               reduce using rule 29 (expressions -> expressions , expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 109

    (15) if -> IF ( condition ) instruction .
    (16) if -> IF ( condition ) instruction . ELSE instruction

    {               reduce using rule 15 (if -> IF ( condition ) instruction .)
    IF              reduce using rule 15 (if -> IF ( condition ) instruction .)
    FOR             reduce using rule 15 (if -> IF ( condition ) instruction .)
    WHILE           reduce using rule 15 (if -> IF ( condition ) instruction .)
    BREAK           reduce using rule 15 (if -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 15 (if -> IF ( condition ) instruction .)
    RETURN          reduce using rule 15 (if -> IF ( condition ) instruction .)
    PRINT           reduce using rule 15 (if -> IF ( condition ) instruction .)
    ID              reduce using rule 15 (if -> IF ( condition ) instruction .)
    $end            reduce using rule 15 (if -> IF ( condition ) instruction .)
    }               reduce using rule 15 (if -> IF ( condition ) instruction .)
    ELSE            shift and go to state 119

  ! ELSE            [ reduce using rule 15 (if -> IF ( condition ) instruction .) ]


state 110

    (54) condition -> expression comparator expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    )               reduce using rule 54 (condition -> expression comparator expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 111

    (17) for -> FOR ID = range instruction .

    {               reduce using rule 17 (for -> FOR ID = range instruction .)
    IF              reduce using rule 17 (for -> FOR ID = range instruction .)
    FOR             reduce using rule 17 (for -> FOR ID = range instruction .)
    WHILE           reduce using rule 17 (for -> FOR ID = range instruction .)
    BREAK           reduce using rule 17 (for -> FOR ID = range instruction .)
    CONTINUE        reduce using rule 17 (for -> FOR ID = range instruction .)
    RETURN          reduce using rule 17 (for -> FOR ID = range instruction .)
    PRINT           reduce using rule 17 (for -> FOR ID = range instruction .)
    ID              reduce using rule 17 (for -> FOR ID = range instruction .)
    $end            reduce using rule 17 (for -> FOR ID = range instruction .)
    }               reduce using rule 17 (for -> FOR ID = range instruction .)
    ELSE            reduce using rule 17 (for -> FOR ID = range instruction .)


state 112

    (18) range -> expression : . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 120
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 113

    (47) variable -> ID [ INTEGER , INTEGER . ]

    ]               shift and go to state 121


state 114

    (19) while -> WHILE ( condition ) instruction .

    {               reduce using rule 19 (while -> WHILE ( condition ) instruction .)
    IF              reduce using rule 19 (while -> WHILE ( condition ) instruction .)
    FOR             reduce using rule 19 (while -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 19 (while -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 19 (while -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 19 (while -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 19 (while -> WHILE ( condition ) instruction .)
    PRINT           reduce using rule 19 (while -> WHILE ( condition ) instruction .)
    ID              reduce using rule 19 (while -> WHILE ( condition ) instruction .)
    $end            reduce using rule 19 (while -> WHILE ( condition ) instruction .)
    }               reduce using rule 19 (while -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 19 (while -> WHILE ( condition ) instruction .)


state 115

    (66) expression -> matrix_func ( INTEGER ) .

    +               reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    -               reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    *               reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    /               reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    DOTADD          reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    DOTSUB          reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    DOTMUL          reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    DOTDIV          reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    '               reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    ;               reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    ,               reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    <               reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    >               reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    EQUAL           reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    NOTEQUAL        reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    LESSEQUAL       reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    GREATEREQUAL    reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    )               reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    ]               reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    :               reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    {               reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    IF              reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    FOR             reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    WHILE           reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    BREAK           reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    CONTINUE        reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    RETURN          reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    PRINT           reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)
    ID              reduce using rule 66 (expression -> matrix_func ( INTEGER ) .)


state 116

    (67) expression -> matrix_func ( INTEGER , . INTEGER )

    INTEGER         shift and go to state 122


state 117

    (36) vectors -> vectors , vector .

    ]               reduce using rule 36 (vectors -> vectors , vector .)
    ,               reduce using rule 36 (vectors -> vectors , vector .)


state 118

    (34) vector -> [ . expressions ]
    (35) vector -> [ . ]
    (29) expressions -> . expressions , expression
    (30) expressions -> . expression
    (25) expression -> . singleton
    (26) expression -> . vector
    (27) expression -> . matrix
    (28) expression -> . variable
    (55) expression -> . expression + expression
    (56) expression -> . expression - expression
    (57) expression -> . expression * expression
    (58) expression -> . expression / expression
    (59) expression -> . expression DOTADD expression
    (60) expression -> . expression DOTSUB expression
    (61) expression -> . expression DOTMUL expression
    (62) expression -> . expression DOTDIV expression
    (63) expression -> . - expression
    (64) expression -> . ( expression )
    (65) expression -> . expression '
    (66) expression -> . matrix_func ( INTEGER )
    (67) expression -> . matrix_func ( INTEGER , INTEGER )
    (31) singleton -> . STRING
    (32) singleton -> . INTEGER
    (33) singleton -> . FLOAT
    (34) vector -> . [ expressions ]
    (35) vector -> . [ ]
    (38) matrix -> . [ vectors ]
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]
    (68) matrix_func -> . EYE
    (69) matrix_func -> . ONES
    (70) matrix_func -> . ZEROS

    ]               shift and go to state 76
    -               shift and go to state 39
    (               shift and go to state 40
    STRING          shift and go to state 43
    INTEGER         shift and go to state 42
    FLOAT           shift and go to state 44
    [               shift and go to state 45
    ID              shift and go to state 16
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expressions                    shift and go to state 75
    expression                     shift and go to state 50
    singleton                      shift and go to state 35
    vector                         shift and go to state 36
    matrix                         shift and go to state 37
    variable                       shift and go to state 38
    matrix_func                    shift and go to state 41

state 119

    (16) if -> IF ( condition ) instruction ELSE . instruction
    (5) instruction -> . block
    (6) instruction -> . if
    (7) instruction -> . for
    (8) instruction -> . while
    (9) instruction -> . break ;
    (10) instruction -> . continue ;
    (11) instruction -> . return ;
    (12) instruction -> . print ;
    (13) instruction -> . assign ;
    (14) block -> . { instructions }
    (15) if -> . IF ( condition ) instruction
    (16) if -> . IF ( condition ) instruction ELSE instruction
    (17) for -> . FOR ID = range instruction
    (19) while -> . WHILE ( condition ) instruction
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) print -> . PRINT expressions
    (39) assign -> . variable = expression
    (40) assign -> . variable calculation_assign expression
    (45) variable -> . ID
    (46) variable -> . ID [ INTEGER ]
    (47) variable -> . ID [ INTEGER , INTEGER ]

    {               shift and go to state 13
    IF              shift and go to state 14
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    ID              shift and go to state 16

    instruction                    shift and go to state 123
    block                          shift and go to state 4
    if                             shift and go to state 5
    for                            shift and go to state 6
    while                          shift and go to state 7
    break                          shift and go to state 8
    continue                       shift and go to state 9
    return                         shift and go to state 10
    print                          shift and go to state 11
    assign                         shift and go to state 12
    variable                       shift and go to state 22

state 120

    (18) range -> expression : expression .
    (55) expression -> expression . + expression
    (56) expression -> expression . - expression
    (57) expression -> expression . * expression
    (58) expression -> expression . / expression
    (59) expression -> expression . DOTADD expression
    (60) expression -> expression . DOTSUB expression
    (61) expression -> expression . DOTMUL expression
    (62) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    {               reduce using rule 18 (range -> expression : expression .)
    IF              reduce using rule 18 (range -> expression : expression .)
    FOR             reduce using rule 18 (range -> expression : expression .)
    WHILE           reduce using rule 18 (range -> expression : expression .)
    BREAK           reduce using rule 18 (range -> expression : expression .)
    CONTINUE        reduce using rule 18 (range -> expression : expression .)
    RETURN          reduce using rule 18 (range -> expression : expression .)
    PRINT           reduce using rule 18 (range -> expression : expression .)
    ID              reduce using rule 18 (range -> expression : expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 121

    (47) variable -> ID [ INTEGER , INTEGER ] .

    =               reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    ADDASSIGN       reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    SUBASSIGN       reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    MULASSIGN       reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    DIVASSIGN       reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    +               reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    -               reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    *               reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    /               reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    DOTADD          reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    DOTSUB          reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    DOTMUL          reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    DOTDIV          reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    '               reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    ;               reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    ,               reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    <               reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    >               reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    EQUAL           reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    NOTEQUAL        reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    LESSEQUAL       reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    GREATEREQUAL    reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    )               reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    ]               reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    :               reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    {               reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    IF              reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    FOR             reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    WHILE           reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    BREAK           reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    CONTINUE        reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    RETURN          reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    PRINT           reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)
    ID              reduce using rule 47 (variable -> ID [ INTEGER , INTEGER ] .)


state 122

    (67) expression -> matrix_func ( INTEGER , INTEGER . )

    )               shift and go to state 124


state 123

    (16) if -> IF ( condition ) instruction ELSE instruction .

    {               reduce using rule 16 (if -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 16 (if -> IF ( condition ) instruction ELSE instruction .)
    FOR             reduce using rule 16 (if -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 16 (if -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 16 (if -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 16 (if -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 16 (if -> IF ( condition ) instruction ELSE instruction .)
    PRINT           reduce using rule 16 (if -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 16 (if -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 16 (if -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 16 (if -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 16 (if -> IF ( condition ) instruction ELSE instruction .)


state 124

    (67) expression -> matrix_func ( INTEGER , INTEGER ) .

    +               reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    -               reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    *               reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    /               reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    DOTADD          reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    DOTSUB          reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    DOTMUL          reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    DOTDIV          reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    '               reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    ;               reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    ,               reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    <               reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    >               reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    EQUAL           reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    NOTEQUAL        reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    LESSEQUAL       reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    GREATEREQUAL    reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    )               reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    ]               reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    :               reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    {               reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    IF              reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    FOR             reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    WHILE           reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    BREAK           reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    CONTINUE        reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    RETURN          reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    PRINT           reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)
    ID              reduce using rule 67 (expression -> matrix_func ( INTEGER , INTEGER ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 78 resolved using rule (expression -> vector)
WARNING: rejected rule (vectors -> vector) in state 78
WARNING: Rule (vectors -> vector) is never reduced
